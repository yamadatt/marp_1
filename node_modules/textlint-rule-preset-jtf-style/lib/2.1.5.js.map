{"version":3,"file":"2.1.5.js","names":["_nodeUtil","require","_textlintRulePrh","_interopRequireDefault","_path","_matchIndex","_moji","e","__esModule","default","toZenkaku","string","moji","convert","toString","reporter","context","Syntax","RuleError","fixer","report","getSource","dictRule","prh","ruleContents","originalStrRule","Str","node","isUserWrittenNode","text","matches","matchCaptureGroupAll","forEach","match","index","fix","replaceTextRange","length","module","exports","linter"],"sources":["../src/2.1.5.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n2.1.5.カタカナ\nカタカナは「全角」で表記します。\n半角カタカナは特殊な用途を除いて、原則として使いません。\n\nHalfwidth Katakana variants（半角片仮名）\n\\uFF65-\\uFF9F とする\nhttp://www.asahi-net.or.jp/~ax2s-kmtn/ref/unicode/uff00.html\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport prh from \"textlint-rule-prh\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { matchCaptureGroupAll } from \"match-index\";\nimport moji from \"moji\";\n/**\n * 半角カタカナを全角カタカナに変換\n *\n * @param {String} str 変換したい文字列\n */\nfunction toZenkaku(string) {\n    return moji(string).convert(\"HK\", \"ZK\").toString();\n}\n\nfunction reporter(context) {\n    let { Syntax, RuleError, fixer, report, getSource } = context;\n    // 辞書ベースのカタカタ表記のチェックを行う\n    let dictRule = prh.fixer(context, {\n        ruleContents: [fs.readFileSync(path.join(__dirname, \"..\", \"dict\", \"2.1.5.yml\"), \"utf-8\")]\n    });\n    let originalStrRule = dictRule[Syntax.Str];\n    // 半角カタカナの使用をチェックする\n    dictRule[Syntax.Str] = function (node) {\n        originalStrRule(node);\n        if (!isUserWrittenNode(node, context)) {\n            return;\n        }\n        const text = getSource(node);\n        const matches = matchCaptureGroupAll(text, /([\\uFF65-\\uFF9F]+)/g);\n        matches.forEach((match) => {\n            const { index, text } = match;\n            report(\n                node,\n                new RuleError(\"カタカナは「全角」で表記します。\", {\n                    index: index,\n                    fix: fixer.replaceTextRange([index, index + text.length], toZenkaku(text))\n                })\n            );\n        });\n    };\n    return dictRule;\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"AAAA;AACA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,KAAA,GAAAD,sBAAA,CAAAF,OAAA;AAEA,IAAAI,WAAA,GAAAJ,OAAA;AACA,IAAAK,KAAA,GAAAH,sBAAA,CAAAF,OAAA;AAAwB,SAAAE,uBAAAI,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AACxB;AACA;AACA;AACA;AACA;AACA,SAASG,SAASA,CAACC,MAAM,EAAE;EACvB,OAAO,IAAAC,aAAI,EAACD,MAAM,CAAC,CAACE,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAACC,QAAQ,CAAC,CAAC;AACtD;AAEA,SAASC,QAAQA,CAACC,OAAO,EAAE;EACvB,IAAI;IAAEC,MAAM;IAAEC,SAAS;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAU,CAAC,GAAGL,OAAO;EAC7D;EACA,IAAIM,QAAQ,GAAGC,wBAAG,CAACJ,KAAK,CAACH,OAAO,EAAE;IAC9BQ,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,IAAIC,eAAe,GAAGH,QAAQ,CAACL,MAAM,CAACS,GAAG,CAAC;EAC1C;EACAJ,QAAQ,CAACL,MAAM,CAACS,GAAG,CAAC,GAAG,UAAUC,IAAI,EAAE;IACnCF,eAAe,CAACE,IAAI,CAAC;IACrB,IAAI,CAAC,IAAAC,2BAAiB,EAACD,IAAI,EAAEX,OAAO,CAAC,EAAE;MACnC;IACJ;IACA,MAAMa,IAAI,GAAGR,SAAS,CAACM,IAAI,CAAC;IAC5B,MAAMG,OAAO,GAAG,IAAAC,gCAAoB,EAACF,IAAI,EAAE,qBAAqB,CAAC;IACjEC,OAAO,CAACE,OAAO,CAAEC,KAAK,IAAK;MACvB,MAAM;QAAEC,KAAK;QAAEL;MAAK,CAAC,GAAGI,KAAK;MAC7Bb,MAAM,CACFO,IAAI,EACJ,IAAIT,SAAS,CAAC,kBAAkB,EAAE;QAC9BgB,KAAK,EAAEA,KAAK;QACZC,GAAG,EAAEhB,KAAK,CAACiB,gBAAgB,CAAC,CAACF,KAAK,EAAEA,KAAK,GAAGL,IAAI,CAACQ,MAAM,CAAC,EAAE3B,SAAS,CAACmB,IAAI,CAAC;MAC7E,CAAC,CACL,CAAC;IACL,CAAC,CAAC;EACN,CAAC;EACD,OAAOP,QAAQ;AACnB;AACAgB,MAAM,CAACC,OAAO,GAAG;EACbC,MAAM,EAAEzB,QAAQ;EAChBI,KAAK,EAAEJ;AACX,CAAC","ignoreList":[]}