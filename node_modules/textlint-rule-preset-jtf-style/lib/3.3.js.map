{"version":3,"file":"3.3.js","names":["_nodeUtil","require","_matchIndex","_regexp","brackets","leftBrackets","map","bracket","RegExp","rightBrackets","leftHalfParentheses","japaneseRegExp","source","rightHalfParentheses","defaultOptions","allowOutsideHalfParentheses","requireOutsideHalfParentheses","reporter","context","options","Syntax","RuleError","report","fixer","getSource","Str","node","isUserWrittenNode","text","forEach","pattern","matchCaptureGroupAll","match","index","substring","fix","replaceTextRange","module","exports","linter"],"sources":["../src/3.3.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n3.3. かっこ類と隣接する文字の間のスペースの有無\nかっこの外側、内側ともにスペースを入れません。\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport { matchCaptureGroupAll } from \"match-index\";\nimport { japaneseRegExp } from \"./util/regexp\";\n\nconst brackets = [\"\\\\(\", \"\\\\)\", \"\\\\[\", \"\\\\]\", \"（\", \"）\", \"［\", \"］\", \"「\", \"」\", \"『\", \"』\"];\nconst leftBrackets = brackets.map((bracket) => {\n    return new RegExp(\"([ 　])\" + bracket, \"g\");\n});\nconst rightBrackets = brackets.map((bracket) => {\n    return new RegExp(bracket + \"([ 　])\", \"g\");\n});\nconst leftHalfParentheses = new RegExp(`${japaneseRegExp.source}(\\\\()`, \"g\");\nconst rightHalfParentheses = new RegExp(`(\\\\))${japaneseRegExp.source}`, \"g\");\nconst defaultOptions = {\n    allowOutsideHalfParentheses: true,\n    requireOutsideHalfParentheses: false\n};\nfunction reporter(context, options) {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    const allowOutsideHalfParentheses =\n        options.allowOutsideHalfParentheses ?? defaultOptions.allowOutsideHalfParentheses;\n    const requireOutsideHalfParentheses =\n        options.requireOutsideHalfParentheses ?? defaultOptions.requireOutsideHalfParentheses;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            // 左にスペース\n            leftBrackets.forEach((pattern) => {\n                matchCaptureGroupAll(text, pattern).forEach((match) => {\n                    const { index } = match;\n                    if (allowOutsideHalfParentheses && text.substring(index, index + 2) === \" (\") {\n                        return;\n                    }\n                    report(\n                        node,\n                        new RuleError(\"かっこの外側、内側ともにスペースを入れません。\", {\n                            index: index,\n                            fix: fixer.replaceTextRange([index, index + 1], \"\")\n                        })\n                    );\n                });\n            });\n            // 右にスペース\n            rightBrackets.forEach((pattern) => {\n                matchCaptureGroupAll(text, pattern).forEach((match) => {\n                    const { index } = match;\n                    if (allowOutsideHalfParentheses && text.substring(index - 1, index + 1) === \") \") {\n                        return;\n                    }\n                    report(\n                        node,\n                        new RuleError(\"かっこの外側、内側ともにスペースを入れません。\", {\n                            index: index,\n                            fix: fixer.replaceTextRange([index, index + 1], \"\")\n                        })\n                    );\n                });\n            });\n            if (requireOutsideHalfParentheses) {\n                // 左にスペース必須\n                matchCaptureGroupAll(text, leftHalfParentheses).forEach((match) => {\n                    const { index } = match;\n                    report(\n                        node,\n                        new RuleError(\"半角かっこの外側に半角スペースが必要です。\", {\n                            index,\n                            fix: fixer.replaceTextRange([index, index + 1], \" \" + match.text)\n                        })\n                    );\n                });\n                // 右にスペース必須\n                matchCaptureGroupAll(text, rightHalfParentheses).forEach((match) => {\n                    const { index } = match;\n                    report(\n                        node,\n                        new RuleError(\"半角かっこの外側に半角スペースが必要です。\", {\n                            index,\n                            fix: fixer.replaceTextRange([index, index + 1], match.text + \" \")\n                        })\n                    );\n                });\n            }\n        }\n    };\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"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","ignoreList":[]}