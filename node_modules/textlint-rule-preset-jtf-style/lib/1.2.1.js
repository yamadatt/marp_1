// LICENSE : MIT
"use strict";

var _regx = _interopRequireDefault(require("regx"));
var _regexp = require("./util/regexp");
var _matchIndex = require("match-index");
var _mergeMatches = _interopRequireDefault(require("./util/merge-matches"));
var _nodeUtil = require("./util/node-util");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const rx = (0, _regx.default)("g");
/*
1.2.1. 句点(。)と読点(、)
句読点には全角の「、」と「。」を使います。和文の句読点としてピリオド(.)とカンマ(,)を使用しません。
「4.1.1 句点(。)」と「4.1.2 読点(、)」を参照してください。
 */

// [,.]{日本語}
const leftTarget = rx`
        ([,\.])
        ${_regexp.japaneseRegExp}
    `;
// {日本語}[,.]
const rightTarget = rx`
        ${_regexp.japaneseRegExp}
        ([,\.])
    `;
// . => 。 の置換マップ
const replaceSymbol = {
  ".": "。",
  ",": "、"
};
const reporter = context => {
  let {
    Syntax,
    RuleError,
    report,
    fixer,
    getSource
  } = context;
  return {
    [Syntax.Str](node) {
      if (!(0, _nodeUtil.isUserWrittenNode)(node, context)) {
        return;
      }
      const text = getSource(node);
      const leftMatches = (0, _matchIndex.matchCaptureGroupAll)(text, leftTarget);
      const rightMatches = (0, _matchIndex.matchCaptureGroupAll)(text, rightTarget);
      const matches = (0, _mergeMatches.default)(leftMatches, rightMatches);
      matches.forEach(match => {
        const symbol = replaceSymbol[match.text];
        const indexOfSymbol = match.index;
        report(node, new RuleError("句読点には全角の「、」と「。」を使います。和文の句読点としてピリオド(.)とカンマ(,)を使用しません。", {
          index: indexOfSymbol,
          fix: fixer.replaceTextRange([indexOfSymbol, indexOfSymbol + 1], symbol)
        }));
      });
    }
  };
};
module.exports = {
  linter: reporter,
  fixer: reporter
};
//# sourceMappingURL=1.2.1.js.map