// LICENSE : MIT
"use strict";

/*
4.3.1.丸かっこ（）
直前の内容を補足して説明する場合や言い換える場合に使用します。
全角のかっこを使用します
 */
var _nodeUtil = require("./util/node-util");
var _matchIndex = require("match-index");
var _regx = _interopRequireDefault(require("regx"));
var _regexp = require("./util/regexp");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const rx = (0, _regx.default)("g");
const replaceSymbol = symbol => {
  var newSymbol = {
    "(": "（",
    ")": "）"
  }[symbol];
  if (!newSymbol) {
    throw new Error("fail to replace symbol");
  }
  return newSymbol;
};
function reporter(context) {
  let {
    Syntax,
    RuleError,
    report,
    fixer,
    getSource
  } = context;
  return {
    [Syntax.Str](node) {
      if (!(0, _nodeUtil.isUserWrittenNode)(node, context)) {
        return;
      }
      // 半角のかっこ()は使用しないで全角のかっこを使用する
      const text = getSource(node);
      const matchRegExps = [rx`([\(\)])(?:.*${_regexp.japaneseRegExp}.*)([\(\)])`, rx`(?:${_regexp.japaneseRegExp})([\(\)])(?:${_regexp.japaneseRegExp})`, rx`^(\()(?:${_regexp.japaneseRegExp})`, rx`(?:${_regexp.japaneseRegExp})(\))$`];
      matchRegExps.forEach(matchRegExp => {
        (0, _matchIndex.matchCaptureGroupAll)(text, matchRegExp).forEach(match => {
          const {
            index
          } = match;
          report(node, new RuleError("半角のかっこ()が使用されています。全角のかっこ（）を使用してください。", {
            index: index,
            fix: fixer.replaceTextRange([index, index + 1], replaceSymbol(match.text))
          }));
        });
      });
    }
  };
}
module.exports = {
  linter: reporter,
  fixer: reporter
};
//# sourceMappingURL=4.3.1.js.map