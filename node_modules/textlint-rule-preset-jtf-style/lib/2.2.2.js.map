{"version":3,"file":"2.2.2.js","names":["_nodeUtil","require","_japaneseNumeralsToNumber","_interopRequireDefault","e","__esModule","default","matchToReplace","text","pattern","matchFn","match","exec","_num2ja","num","opt","sign","zero","point","zero2nine","ten2thou","suffices","replace","sig","RegExp","$1","int","$2","fract","$3","seisuu","shins","i","length","push","substring","suffix","shin","sens","keta","digits","split","reverse","j","digit","flg","k","suuji","result","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","isUserWrittenNode","toNumber","matchedString","index","expected","all","ja2num","ruleError","fix","replaceTextRange","toKanNumber","with_arabic","ignoreWhenMatched","ignorePatterns","some","p","test","module","exports","linter"],"sources":["../src/2.2.2.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport ja2num from \"japanese-numerals-to-number\";\n\nfunction matchToReplace(text, pattern, matchFn) {\n    var match = pattern.exec(text);\n    if (match) {\n        return matchFn(text, pattern, match);\n    }\n    return null;\n}\n\n// http://www.drk7.jp/MT/archives/001587.html\nfunction _num2ja(num, opt) {\n    var sign = {\n        \"+\": \"\",\n        \"-\": \"−\"\n    };\n    var zero = \"零\";\n    var point = \"点\";\n    var zero2nine = [\"〇\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\"];\n    var ten2thou = [\"\", \"十\", \"百\", \"千\"];\n    var suffices = [\n        \"\",\n        \"万\",\n        \"億\",\n        \"兆\",\n        \"京\",\n        \"垓\",\n        \"禾予\",\n        \"穣\",\n        \"溝\",\n        \"澗\",\n        \"正\",\n        \"載,\",\n        \"極\",\n        \"恒河沙\",\n        \"阿僧祇\",\n        \"那由他\",\n        \"不可思議\",\n        \"無量大数\"\n    ];\n\n    num = num.replace(/,/g, \"\");\n    num.match(/([+-])?(\\d+)(?:\\.(\\d+))?/i);\n    var sig = RegExp.$1;\n    var int = RegExp.$2;\n    var fract = RegExp.$3;\n    var seisuu = \"\";\n    var shins = [];\n\n    for (let i = int.length; i > 0; i -= 4) {\n        shins.push(int.substring(i, i - 4));\n    }\n    if (shins.length >= 18) {\n        return suffices[17];\n    }\n\n    var suffix = 0;\n    for (let i = 0; i < shins.length; i++) {\n        var shin = shins[i];\n        if (shin == \"0000\") {\n            suffix++;\n            continue;\n        }\n        var sens = \"\";\n        var keta = 0;\n        var digits = shin.split(\"\").reverse();\n        for (var j = 0; j < digits.length; j++) {\n            var digit = digits[j];\n\n            if (opt[\"fixed4\"] || opt[\"with_arabic\"]) {\n                if (opt[\"with_arabic\"]) {\n                    var flg = 0;\n                    // 余分な 0 を削除する\n                    if (digit == \"0\") {\n                        for (var k = j + 1; k < digits.length; k++) {\n                            flg += digits[k] == \"0\" ? 0 : 1;\n                        }\n                        if (flg == 0) {\n                            digit = \"\";\n                        }\n                    }\n                    sens = digit + sens;\n                } else {\n                    sens = zero2nine[digit] + sens;\n                }\n            } else {\n                var suuji = digit == 1 && !opt[\"p_one\"] && keta > 0 ? \"\" : zero2nine[digit];\n                if (digit != 0) {\n                    sens = suuji + ten2thou[keta] + sens;\n                }\n            }\n            keta++;\n        }\n        seisuu = sens + suffices[suffix++] + seisuu;\n    }\n    var result = (sign[sig] || \"\") + seisuu;\n    result = result || zero;\n    if (fract) {\n        result = result + point + fract;\n    }\n    return result;\n}\n\nfunction reporter(context) {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            // 漢数字 -> 算用数字\n            const toNumber = (text, pattern, match) => {\n                const matchedString = match[0];\n                const index = match.index;\n                const expected = matchedString.replace(pattern, function (all, match) {\n                    return all.replace(match, ja2num(match));\n                });\n                const ruleError = new RuleError(\n                    `${matchedString} => ${expected}\n数量を表現し、数を数えられるものは算用数字を使用します。任意の数に置き換えても通用する語句がこれに該当します。`,\n                    {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + matchedString.length], expected)\n                    }\n                );\n                report(node, ruleError);\n            };\n\n            /**\n             * 算用数字 -> 漢数字\n             * @param {string} text\n             * @param {RegExp} pattern\n             * @param {*[]} match\n             */\n            const toKanNumber = (text, pattern, match) => {\n                const matchedString = match[0];\n                const expected = matchedString.replace(pattern, function (all, match) {\n                    return all.replace(match, _num2ja(match, { with_arabic: false }));\n                });\n                const index = match.index;\n                report(\n                    node,\n                    new RuleError(\n                        `${matchedString} => ${expected}\n慣用的表現、熟語、概数、固有名詞、副詞など、漢数字を使用することが一般的な語句では漢数字を使います。`,\n                        {\n                            index: index,\n                            fix: fixer.replaceTextRange([index, index + matchedString.length], expected)\n                        }\n                    )\n                );\n            };\n\n            // ignorePatternにマッチしたらmatchFnを呼ばないようにする(エラーを無視する)\n            const ignoreWhenMatched = (ignorePatterns, matchFn) => {\n                return (text, pattern, match) => {\n                    if (ignorePatterns.some((p) => p.test(text))) {\n                        return null;\n                    } else {\n                        return matchFn(text, pattern, match);\n                    }\n                };\n            };\n\n            // ＊数えられる数字は算用数字を使う\n            // 数十万、数百億にマッチしないように\"数\"という文字から始まるものは除外\n            // https://github.com/textlint-ja/textlint-rule-preset-jtf-style/pull/23\n            matchToReplace(\n                text,\n                /([一二三四五六七八九十壱弐参拾百〇]+)[兆億万]/g,\n                ignoreWhenMatched([/(数|何)([一二三四五六七八九十壱弐参拾百〇]+)[兆億万]/g], toNumber)\n            );\n            matchToReplace(\n                text,\n                /([一二三四五六七八九十壱弐参拾百〇]+)つ/g,\n                ignoreWhenMatched(\n                    [\n                        /[一二三四五六七八九]つ(返事|子|ひとつ|星|編|葉|橋|と[無な]い|に一つ)/g,\n                        /(ただ|唯|[女男]手|穴|瓜|馬鹿の)[一二]つ/g\n                    ],\n                    toNumber\n                )\n            );\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)回/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)か月/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)番目/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)進法/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)次元/g, toNumber);\n            matchToReplace(text, /第([一二三四五六七八九十壱弐参拾百〇]+)章/g, toNumber);\n            matchToReplace(text, /第([一二三四五六七八九十壱弐参拾百〇]+)節/g, toNumber);\n            // ＊漢数字を使う\n            // 慣用的表現、熟語、概数、固有名詞、副詞など、漢数字を使用することが一般的な語句では漢数字を使います。\n            matchToReplace(text, /世界(1)/g, toKanNumber);\n            matchToReplace(text, /(1)時的/g, toKanNumber);\n            matchToReplace(text, /(1)部分/g, toKanNumber);\n            matchToReplace(text, /第(3)者/g, toKanNumber);\n            // 1種 -> 一種: 11種類などにはマッチしない\n            matchToReplace(text, /[^\\d](1)種(?!類)/g, toKanNumber);\n            matchToReplace(text, /(1)部の/g, toKanNumber);\n            matchToReplace(text, /(1)番に/g, toKanNumber);\n            matchToReplace(text, /数(10+)倍/g, toKanNumber);\n            matchToReplace(text, /数(10+)[兆億万]/g, toKanNumber);\n            matchToReplace(text, /数(10+)年/g, toKanNumber);\n            matchToReplace(text, /([0-9]+)次関数/g, toKanNumber);\n            matchToReplace(text, /(5)大陸/g, toKanNumber);\n        }\n    };\n}\n\n// 2.2.2. 算用数字と漢数字の使い分け\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"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","ignoreList":[]}