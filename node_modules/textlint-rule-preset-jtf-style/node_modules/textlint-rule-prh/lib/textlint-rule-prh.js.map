{"version":3,"file":"textlint-rule-prh.js","names":["_textlintRuleHelper","require","_parser","_prh","_nodePath","_interopRequireDefault","_nodeOs","obj","__esModule","default","homeDirectory","os","homedir","untildify","filePath","replace","defaultOptions","checkLink","checkBlockQuote","checkEmphasis","checkHeader","checkCodeComment","debug","createPrhEngine","rulePaths","baseDir","length","expandedRulePaths","map","rulePath","prhEngine","fromYAMLFilePath","path","resolve","slice","forEach","ruleFilePath","config","merge","createPrhEngineFromContents","yamlContents","dummyFilePath","fromYAML","content","mergePrh","engines","engines_","filter","engine","mainEngine","assertOptions","options","ruleContents","Error","createIgnoreNodeTypes","Syntax","nodeTypes","push","Link","BlockQuote","Emphasis","Header","forEachChange","changeSet","str","onChangeOfMatch","sortedDiffs","diffs","sort","a","b","index","delta","diff","result","expected","match","g1","parseInt","matches","matchStartIndex","matchEndIndex","actual","prh","rule","raw","getConfigBaseDir","context","process","cwd","textlintRcFilePath","configFile","dirname","getUntrimmedCode","node","type","value","lang","startsWith","endsWith","lines","split","codeLines","join","reporter","userOptions","Object","assign","textlintRCDir","prhEngineContent","prhEngineFiles","helper","RuleHelper","getSource","report","fixer","RuleError","ignoreNodeTypes","codeCommentTypes","isDebug","Str","isChildNode","text","makeChangeSet","suffix","messages","fix","replaceTextRange","CodeBlock","checkLang","some","rawText","codeText","sourceBlockDiffIndex","indexOf","reportComment","comment","commentIdentifier","commentStart","start","AST","parse","ranges","allowReturnOutsideFunction","allowAwaitOutsideFunction","allowUndeclaredExports","allowSuperOutsideMethod","comments","error","console","message","_default","exports","linter"],"sources":["../src/textlint-rule-prh.js"],"sourcesContent":["// LICENSE : MIT\nimport { RuleHelper } from \"textlint-rule-helper\";\nimport { parse } from \"@babel/parser\";\nimport { fromYAMLFilePath, fromYAML } from \"prh\";\nimport path from \"node:path\";\nimport os from \"node:os\";\n\nconst homeDirectory = os.homedir();\n\nconst untildify = (filePath) => {\n    return homeDirectory ? filePath.replace(/^~(?=$|\\/|\\\\)/, homeDirectory) : filePath;\n};\nconst defaultOptions = {\n    checkLink: false,\n    checkBlockQuote: false,\n    checkEmphasis: false,\n    checkHeader: true,\n    /**\n     * Check CodeBlock text\n     * Default: []\n     */\n    checkCodeComment: [],\n    /**\n     * Report parsing error for debug\n     */\n    debug: false\n};\n\nfunction createPrhEngine(rulePaths, baseDir) {\n    if (rulePaths.length === 0) {\n        return null;\n    }\n    const expandedRulePaths = rulePaths.map((rulePath) => untildify(rulePath));\n    const prhEngine = fromYAMLFilePath(path.resolve(baseDir, expandedRulePaths[0]));\n    expandedRulePaths.slice(1).forEach((ruleFilePath) => {\n        const config = fromYAMLFilePath(path.resolve(baseDir, ruleFilePath));\n        prhEngine.merge(config);\n    });\n    return prhEngine;\n}\n\nfunction createPrhEngineFromContents(yamlContents) {\n    if (yamlContents.length === 0) {\n        return null;\n    }\n    const dummyFilePath = \"\";\n    const prhEngine = fromYAML(dummyFilePath, yamlContents[0]);\n    yamlContents.slice(1).forEach((content) => {\n        const config = fromYAML(dummyFilePath, content);\n        prhEngine.merge(config);\n    });\n    return prhEngine;\n}\n\nfunction mergePrh(...engines) {\n    const engines_ = engines.filter((engine) => !!engine);\n    const mainEngine = engines_[0];\n    engines_.slice(1).forEach((engine) => {\n        mainEngine.merge(engine);\n    });\n    return mainEngine;\n}\n\nconst assertOptions = (options) => {\n    if (typeof options.ruleContents === \"undefined\" && typeof options.rulePaths === \"undefined\") {\n        throw new Error(`textlint-rule-prh require Rule Options.\nPlease set .textlintrc:\n{\n    \"rules\": {\n        \"prh\": {\n            \"rulePaths\" :[\"path/to/prh.yml\"]\n        }\n    }\n}\n`);\n    }\n};\n\nconst createIgnoreNodeTypes = (options, Syntax) => {\n    const nodeTypes = [];\n    if (!options.checkLink) {\n        nodeTypes.push(Syntax.Link);\n    }\n    if (!options.checkBlockQuote) {\n        nodeTypes.push(Syntax.BlockQuote);\n    }\n    if (!options.checkEmphasis) {\n        nodeTypes.push(Syntax.Emphasis);\n    }\n    if (!options.checkHeader) {\n        nodeTypes.push(Syntax.Header);\n    }\n    return nodeTypes;\n};\n\n/**\n * for each diff of changeSet\n * @param {ChangeSet} changeSet\n * @param {string} str\n * @param {function({\n matchStartIndex: number,\n matchEndIndex: number,\n actual: string\n expected: string\n })}onChangeOfMatch\n */\nconst forEachChange = (changeSet, str, onChangeOfMatch) => {\n    const sortedDiffs = changeSet.diffs.sort(function (a, b) {\n        return a.index - b.index;\n    });\n    let delta = 0;\n    sortedDiffs.forEach(function (diff) {\n        const result = diff.expected.replace(/\\$([0-9]{1,2})/g, function (match, g1) {\n            const index = parseInt(g1);\n            if (index === 0 || diff.matches.length - 1 < index) {\n                return match;\n            }\n            return diff.matches[index] || \"\";\n        });\n        // matchStartIndex/matchEndIndex value is original position, not replaced position\n        // textlint use original position\n        const matchStartIndex = diff.index;\n        const matchEndIndex = matchStartIndex + diff.matches[0].length;\n        // actual => expected\n        const actual = str.slice(diff.index + delta, diff.index + delta + diff.matches[0].length);\n        const prh = diff.rule.raw.prh || null;\n        onChangeOfMatch({\n            matchStartIndex,\n            matchEndIndex,\n            actual: actual,\n            expected: result,\n            prh\n        });\n        str = str.slice(0, diff.index + delta) + result + str.slice(diff.index + delta + diff.matches[0].length);\n        delta += result.length - diff.matches[0].length;\n    });\n};\nconst getConfigBaseDir = (context) => {\n    if (typeof context.getConfigBaseDir === \"function\") {\n        return context.getConfigBaseDir() || process.cwd();\n    }\n    // Old fallback that use deprecated `config` value\n    // https://github.com/textlint/textlint/issues/294\n    const textlintRcFilePath = context.config ? context.config.configFile : null;\n    // .textlintrc directory\n    return textlintRcFilePath ? path.dirname(textlintRcFilePath) : process.cwd();\n};\n\n/**\n * [Markdown] get actual code value from CodeBlock node\n * @param {Object} node\n * @param {string} raw raw value include CodeBlock syntax\n * @returns {string}\n */\nfunction getUntrimmedCode(node, raw) {\n    if (node.type !== \"CodeBlock\") {\n        return node.value;\n    }\n    // Space indented CodeBlock that has not lang\n    if (!node.lang) {\n        return node.value;\n    }\n\n    // If it is not markdown codeBlock, just use node.value\n    if (!(raw.startsWith(\"```\") && raw.endsWith(\"```\"))) {\n        if (node.value.endsWith(\"\\n\")) {\n            return node.value;\n        }\n        return node.value + \"\\n\";\n    }\n    // Markdown(remark) specific hack\n    // https://github.com/wooorm/remark/issues/207#issuecomment-244620590\n    const lines = raw.split(\"\\n\");\n    // code lines without the first line and the last line\n    const codeLines = lines.slice(1, lines.length - 1);\n    // add last new line\n    // \\n```\n    return codeLines.join(\"\\n\") + \"\\n\";\n}\n\nfunction reporter(context, userOptions = {}) {\n    assertOptions(userOptions);\n    const options = Object.assign({}, defaultOptions, userOptions);\n    // .textlintrc directory\n    const textlintRCDir = getConfigBaseDir(context);\n    // create prh config\n    const rulePaths = options.rulePaths || [];\n    const ruleContents = options.ruleContents || [];\n    // yaml file + yaml contents\n    const prhEngineContent = createPrhEngineFromContents(ruleContents);\n    const prhEngineFiles = createPrhEngine(rulePaths, textlintRCDir);\n    const prhEngine = mergePrh(prhEngineFiles, prhEngineContent);\n    const helper = new RuleHelper(context);\n    const { Syntax, getSource, report, fixer, RuleError } = context;\n    const ignoreNodeTypes = createIgnoreNodeTypes(options, Syntax);\n    const codeCommentTypes = options.checkCodeComment ? options.checkCodeComment : defaultOptions.checkCodeComment;\n    const isDebug = options.debug ? options.debug : defaultOptions.debug;\n    return {\n        [Syntax.Str](node) {\n            if (helper.isChildNode(node, ignoreNodeTypes)) {\n                return;\n            }\n            const text = getSource(node);\n            // to get position from index\n            // https://github.com/prh/prh/issues/29\n            const dummyFilePath = \"\";\n            const makeChangeSet = prhEngine.makeChangeSet(dummyFilePath, text);\n            forEachChange(makeChangeSet, text, ({ matchStartIndex, matchEndIndex, actual, expected, prh }) => {\n                // If result is not changed, should not report\n                if (actual === expected) {\n                    return;\n                }\n\n                const suffix = prh !== null ? \"\\n\" + prh : \"\";\n                const messages = actual + \" => \" + expected + suffix;\n                report(\n                    node,\n                    new RuleError(messages, {\n                        index: matchStartIndex,\n                        fix: fixer.replaceTextRange([matchStartIndex, matchEndIndex], expected)\n                    })\n                );\n            });\n        },\n        [Syntax.CodeBlock](node) {\n            const lang = node.lang;\n            if (!lang) {\n                return;\n            }\n            const checkLang = codeCommentTypes.some((type) => {\n                return type === node.lang;\n            });\n            if (!checkLang) {\n                return;\n            }\n            const rawText = getSource(node);\n            const codeText = getUntrimmedCode(node, rawText);\n            const sourceBlockDiffIndex = rawText !== node.value ? rawText.indexOf(codeText) : 0;\n            const reportComment = (comment) => {\n                // to get position from index\n                // https://github.com/prh/prh/issues/29\n                const dummyFilePath = \"\";\n                // TODO: trim option for value?\n                const text = comment.value;\n                const makeChangeSet = prhEngine.makeChangeSet(dummyFilePath, text);\n                forEachChange(makeChangeSet, text, ({ matchStartIndex, matchEndIndex, actual, expected, prh }) => {\n                    // If result is not changed, should not report\n                    if (actual === expected) {\n                        return;\n                    }\n\n                    const suffix = prh !== null ? \"\\n\" + prh : \"\";\n                    const messages = actual + \" => \" + expected + suffix;\n                    const commentIdentifier = comment.type === \"CommentBlock\" ? \"/*\" : \"//\";\n                    const commentStart = sourceBlockDiffIndex + comment.start + commentIdentifier.length;\n                    report(\n                        node,\n                        new RuleError(messages, {\n                            index: commentStart + matchStartIndex,\n                            fix: fixer.replaceTextRange(\n                                [commentStart + matchStartIndex, commentStart + matchEndIndex],\n                                expected\n                            )\n                        })\n                    );\n                });\n            };\n            try {\n                const AST = parse(codeText, {\n                    ranges: true,\n                    allowReturnOutsideFunction: true,\n                    allowAwaitOutsideFunction: true,\n                    allowUndeclaredExports: true,\n                    allowSuperOutsideMethod: true\n                });\n                const comments = AST.comments;\n                if (!comments) {\n                    return;\n                }\n                comments.forEach((comment) => {\n                    reportComment(comment);\n                });\n            } catch (error) {\n                if (isDebug) {\n                    console.error(error);\n                    report(node, new RuleError(error.message));\n                }\n            }\n        }\n    };\n}\n\nexport default {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"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"}