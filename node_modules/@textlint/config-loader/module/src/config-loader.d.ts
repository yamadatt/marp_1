import { TextlintRcConfig } from "./TextlintRcConfig";
import type { TextlintConfigDescriptor } from "./TextlintConfigDescriptor";
export type TextlintConfigLoaderOptions = {
    cwd?: string;
    /**
     * config file path
     */
    configFilePath?: string;
    /**
     * For debugging
     * custom node_modules directory path
     * Default: undefined = node_modules
     */
    node_modulesDir?: string;
    /**
     * For debugging or hack
     * @unstable
     * @param packages
     */
    preLoadingPackage?: (packages: TextlintLoadPackagesFromRawConfigOptions) => TextlintLoadPackagesFromRawConfigOptions;
    /**
     * These definitions replace id to rule module
     * It is useful for replacing specific ruleId with specific rule module.
     * Main use-case is tester.
     */
    testReplaceDefinitions?: {
        rule?: TextlintConfigDescriptor["rules"];
        filterRules?: TextlintConfigDescriptor["filterRules"];
        plugins?: TextlintConfigDescriptor["plugins"];
    };
};
export type TextlintLintConfigLoaderResult = {
    ok: true;
    config: TextlintConfigDescriptor;
    configFilePath: string;
    rawConfig: TextlintRcConfig;
} | {
    ok: false;
    configFilePath?: string;
    rawConfig?: TextlintRcConfig;
    error: {
        message: string;
        errors: Error[];
    };
};
export type TextlintConfigLoaderRawResult = {
    ok: true;
    configFilePath: string;
    rawConfig: TextlintRcConfig;
} | {
    ok: false;
    error: {
        message: string;
        errors: Error[];
    };
};
export type TextlintLoadPackagesFromRawConfigOptions = {
    /**
     * Loaded config object
     */
    rawConfig: TextlintRcConfig;
    /**
     * node_modules directory path
     * Default: undefined
     */
    node_moduleDir?: string;
    /**
     * These definitions replace id to rule module
     * It is useful for replacing specific ruleId with specific rule module.
     * Main use-case is testing.
     */
    testReplaceDefinitions?: {
        rule?: TextlintConfigDescriptor["rules"];
        filterRules?: TextlintConfigDescriptor["filterRules"];
        plugins?: TextlintConfigDescriptor["plugins"];
    };
};
export type TextlintLoadPackagesFromRawConfigResult = {
    ok: true;
    config: TextlintConfigDescriptor;
} | {
    ok: false;
    error: {
        message: string;
        errors: Error[];
    };
};
/**
 * Load packages in RawConfig and return loaded config object
 * @param options
 */
export declare const loadPackagesFromRawConfig: (options: TextlintLoadPackagesFromRawConfigOptions) => Promise<TextlintLoadPackagesFromRawConfigResult>;
/**
 *  Load config file and return config object that is loaded rule instance.
 * @param options
 */
export declare const loadConfig: (options: TextlintConfigLoaderOptions) => Promise<TextlintLintConfigLoaderResult>;
/**
 *  Load config file and return parsed config object that is not loaded rule instance
 *  It is just JSON present for config file. Raw data
 * @param options
 */
export declare const loadRawConfig: (options: TextlintConfigLoaderOptions) => Promise<TextlintConfigLoaderRawResult>;
//# sourceMappingURL=config-loader.d.ts.map