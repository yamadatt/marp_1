// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadFixerFormatter = exports.loadLinterFormatter = exports.loadTextlintrc = exports.createLinter = exports.TextLintCore = exports.TextFixEngine = exports.TextLintEngine = exports.textlint = exports.cli = void 0;
/**
 * Command line interface
 */
var cli_1 = require("./cli");
Object.defineProperty(exports, "cli", { enumerable: true, get: function () { return cli_1.cli; } });
/**
 * @deprecated use New APIs
 */
var textlint_1 = require("./textlint");
Object.defineProperty(exports, "textlint", { enumerable: true, get: function () { return textlint_1.textlint; } });
/**
 * TextLintEngine is a wrapper around `textlint` for linting **multiple** files
 * include formatter, detecting utils
 * You can see engine/textlint-engine-core.js for more detail
 * @deprecated use New APIs
 */
var textlint_engine_1 = require("./DEPRECATED/textlint-engine");
Object.defineProperty(exports, "TextLintEngine", { enumerable: true, get: function () { return textlint_engine_1.TextLintEngine; } });
/**
 * TextFixEngine is a wrapper around `textlint` for linting **multiple** files
 * include formatter, detecting utils
 * You can see engine/textlint-engine-core.js for more detail
 * @deprecated use New APIs
 */
var textfix_engine_1 = require("./DEPRECATED/textfix-engine");
Object.defineProperty(exports, "TextFixEngine", { enumerable: true, get: function () { return textfix_engine_1.TextFixEngine; } });
/**
 * Core API for linting a **single** text or file.
 * @deprecated use New APIs or @textlint/kernel
 */
var textlint_core_1 = require("./DEPRECATED/textlint-core");
Object.defineProperty(exports, "TextLintCore", { enumerable: true, get: function () { return textlint_core_1.TextLintCore; } });
/* = New APIs */
/**
 * @see {https://textlint.github.io/docs/use-as-modules.html#new-apis}
 * @example
 *
 * ```js
 *  import { createLinter, loadTextlintrc, loadLinterFormatter } from "textlint";
 *  const descriptor = await loadTextlintrc();
 *  const linter = createLinter({
 *      descriptor
 *  });
 *  const results = await linter.lintFiles(["*.md"]);
 *  const formatter = await loadLinterFormatter({ formatterName: "stylish" })
 *  const output = formatter.format(results);
 *  console.log(output);
 *  ```
 */
var createLinter_1 = require("./createLinter");
Object.defineProperty(exports, "createLinter", { enumerable: true, get: function () { return createLinter_1.createLinter; } });
var TextlintrcLoader_1 = require("./loader/TextlintrcLoader");
Object.defineProperty(exports, "loadTextlintrc", { enumerable: true, get: function () { return TextlintrcLoader_1.loadTextlintrc; } });
var formatter_1 = require("./formatter");
Object.defineProperty(exports, "loadLinterFormatter", { enumerable: true, get: function () { return formatter_1.loadLinterFormatter; } });
Object.defineProperty(exports, "loadFixerFormatter", { enumerable: true, get: function () { return formatter_1.loadFixerFormatter; } });
//# sourceMappingURL=index.js.map