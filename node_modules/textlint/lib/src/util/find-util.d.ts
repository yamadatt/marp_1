export type SearchFilesOptions = {
    cwd: string;
    ignoreFilePath?: string;
};
export type SearchFilesNoTargetFileError = {
    type: "SearchFilesNoTargetFileError";
};
export type SearchFilesResultError = SearchFilesNoTargetFileError;
export type SearchFilesResult = {
    ok: true;
    items: string[];
} | {
    ok: false;
    errors: SearchFilesResultError[];
};
/**
 * globby wrapper that support ignore options
 * @param patterns
 * @param options
 */
export declare const searchFiles: (patterns: string[], options: SearchFilesOptions) => Promise<SearchFilesResult>;
export type ScanFilePathNoExistFilePathError = {
    type: "ScanFilePathNoExistFilePathError";
    filePath: string;
};
export type ScanFilePathResultError = ScanFilePathNoExistFilePathError | SearchFilesResultError;
export type ScanFilePathResult = {
    status: "ok";
} | {
    status: "ignored";
} | {
    status: "error";
    errors: ScanFilePathResultError[];
};
/**
 * Scan file path and return the file is target or not
 * @param filePath
 * @param options
 */
export declare const scanFilePath: (filePath: string, options: SearchFilesOptions) => Promise<ScanFilePathResult>;
//# sourceMappingURL=find-util.d.ts.map