{"version":3,"file":"textlint-rule-no-invalid-control-character.js","names":["_CONTROL_CHARACTERS","require","unicodeEscape","str","replace","c","charCodeAt","toString","substr","getName","char","matchChar","CONTROL_CHARACTERS","find","CONTROL_CHARACTER","code","name","DEFAULT_OPTION","allow","checkCode","checkImage","reporter","context","options","Syntax","RuleError","getSource","fixer","report","locator","undefined","checkNode","node","text","asciiControlCharacters","c1ControlCharacters","bidiFormattingCharacters","controlCharacterPattern","RegExp","matches","matchAll","match","index","some","allowChar","ruleError","fix","removeRange","Str","CodeBlock","Code","Image","module","exports","linter"],"sources":["../src/textlint-rule-no-invalid-control-character.js"],"sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\n\nimport { CONTROL_CHARACTERS } from \"./CONTROL_CHARACTERS\";\n\n/**\n * Convert char to \\uXXXX\n * @param {string} str\n * @return {string}\n */\nconst unicodeEscape = (str) => {\n    return str.replace(/./g, (c) => {\n        return `\\\\u${`000${c.charCodeAt(0).toString(16)}`.substr(-4)}`;\n    });\n};\n\nconst getName = (char) => {\n    const matchChar = CONTROL_CHARACTERS.find((CONTROL_CHARACTER) => CONTROL_CHARACTER.code === char);\n    if (!matchChar) {\n        return \"\";\n    }\n    return matchChar.name;\n};\n\nconst DEFAULT_OPTION = {\n    // Define allow char code like `\\u0019`\n    allow: [],\n    // Check code if it is true\n    checkCode: false,\n    // Check image title and alt text if it is true\n    checkImage: true\n};\n\n/**\n *\n * @param {import(\"@textlint/types\").TextlintRuleContext} context\n * @param options\n * @returns {{}}\n */\nconst reporter = (context, options = {}) => {\n    const { Syntax, RuleError, getSource, fixer, report, locator } = context;\n    const allow = options.allow || DEFAULT_OPTION.allow;\n    const checkCode = options.checkCode !== undefined ? options.checkCode : DEFAULT_OPTION.checkCode;\n    const checkImage = options.checkImage !== undefined ? options.checkImage : DEFAULT_OPTION.checkImage;\n    const checkNode = (node) => {\n        const text = getSource(node);\n        // Ignore \\r \\n \\t\n        const asciiControlCharacters = \"\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F\";\n        const c1ControlCharacters = \"\\x80-\\x89\\x8A-\\x9F\";\n        const bidiFormattingCharacters = \"\\u202A-\\u202E\";\n        const controlCharacterPattern = new RegExp(\n            `([${asciiControlCharacters}${c1ControlCharacters}${bidiFormattingCharacters}])`,\n            \"g\"\n        );\n\n        /**\n         * @type {Array<{match:string, sub:string[], index:number}>}\n         */\n        const matches = text.matchAll(controlCharacterPattern);\n        for (const match of matches) {\n            const index = match.index;\n            const char = match[1];\n            // if allow the `char`, ignore it\n            if (allow.some((allowChar) => allowChar === char)) {\n                continue;\n            }\n            const name = getName(char);\n            const ruleError = new RuleError(`Found invalid control character(${name} ${unicodeEscape(char)})`, {\n                index: index,\n                fix: fixer.removeRange([index, index + 1])\n            });\n            report(node, ruleError);\n        }\n    };\n    return {\n        [Syntax.Str](node) {\n            checkNode(node);\n        },\n        [Syntax.CodeBlock](node) {\n            if (checkCode) {\n                checkNode(node);\n            }\n        },\n        [Syntax.Code](node) {\n            if (checkCode) {\n                checkNode(node);\n            }\n        },\n        [Syntax.Image](node) {\n            if (checkImage) {\n                checkNode(node);\n            }\n        }\n    };\n};\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"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","ignoreList":[]}