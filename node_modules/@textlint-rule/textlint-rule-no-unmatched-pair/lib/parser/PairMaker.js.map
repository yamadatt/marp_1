{"version":3,"file":"PairMaker.js","names":["PAIR_MARKS","key","start","end","PAIR_MARKS_ENTRIES","map","mark","flat","PAIR_MARKS_KEY_Map","Map","matchPair","string","get","PairMaker","sourceCode","read","matchedPair","isInContext","pair","find","leaveContext","enterContext","exports"],"sources":["../../src/parser/PairMaker.js"],"sourcesContent":["/**\n * Mark pair character\n * PairMarker aim to mark pair string as a single sentence.\n *\n * For example, Following sentence has two period(。). but it should treat a single sentence\n *\n * > I hear \"I'm back to home.\" from radio.\n *\n * https://ja.wikipedia.org/wiki/%E6%8B%AC%E5%BC%A7\n */\n/**\n * @typedef {{key:string,start:string,end:string}[]} PairMark\n */\nconst PAIR_MARKS = [\n    {\n        key: \"double quote\",\n        start: `\"`,\n        end: `\"`\n    },\n    {\n        key: \"angled bracket[]\",\n        start: `[`,\n        end: `]`\n    },\n    {\n        key: \"round bracket()\",\n        start: `(`,\n        end: `)`\n    },\n    {\n        key: \"curly brace{}\",\n        start: `{`,\n        end: `}`\n    },\n    {\n        key: \"かぎ括弧「」\",\n        start: `「`,\n        end: `」`\n    },\n    {\n        key: \"丸括弧（）\",\n        start: `（`,\n        end: `）`\n    },\n    {\n        key: \"二重かぎ括弧『』\",\n        start: `『`,\n        end: `』`\n    },\n    {\n        key: \"波括弧｛｝\",\n        start: `｛`,\n        end: `｝`\n    },\n    {\n        key: \"角括弧［］\",\n        start: `［`,\n        end: `］`\n    },\n    {\n        key: \"重角括弧〚〛\",\n        start: `〚`,\n        end: `〛`\n    },\n    {\n        key: \"隅付き括弧【】\",\n        start: `【`,\n        end: `】`\n    },\n    {\n        key: \"double guillemet «»\",\n        start: \"«\",\n        end: \"»\"\n    },\n    {\n        key: \"single guillemet ‹›\",\n        start: \"‹\",\n        end: \"›\"\n    }\n];\n\n// create entries\n// [start.key, mark]\n// [end.key, mark]\nconst PAIR_MARKS_ENTRIES = PAIR_MARKS.map((mark) => {\n    return [\n        [mark.start, mark],\n        [mark.end, mark]\n    ];\n}).flat(1);\n\n/**\n * Optimized Map\n * @type Map<string, {key:string,start:string,end:string}>\n */\nconst PAIR_MARKS_KEY_Map = new Map(PAIR_MARKS_ENTRIES);\nconst matchPair = (string) => {\n    return PAIR_MARKS_KEY_Map.get(string);\n};\n// For readme\n// console.log(PAIR_MARKS.map(pair => `- ${pair.key}: \\`${pair.start}\\` and \\`${pair.end}\\``).join(\"\\n\"));\nexport class PairMaker {\n    /**\n     * @param {import(\"./SourceCode\").SourceCode} sourceCode\n     * @returns\n     */\n    mark(sourceCode) {\n        const string = sourceCode.read();\n        if (!string) {\n            return;\n        }\n\n        const matchedPair = matchPair(string);\n        if (!matchedPair) {\n            return;\n        }\n        // support nested pair\n        // {\"{test}\"}\n        if (sourceCode.isInContext(matchedPair)) {\n            // check that string is end mark?\n            const pair = PAIR_MARKS.find((pair) => pair.end === string);\n            if (pair) {\n                sourceCode.leaveContext(pair);\n            }\n        } else {\n            const pair = PAIR_MARKS.find((pair) => pair.start === string);\n            if (pair) {\n                sourceCode.enterContext(pair);\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}