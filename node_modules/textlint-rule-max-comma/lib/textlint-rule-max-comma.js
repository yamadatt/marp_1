// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _sentenceSplitter = require("sentence-splitter");
var _textlintUtilToString = require("textlint-util-to-string");
function countOfComma(text) {
  return text.split(",").length - 1;
}
var defaultOptions = {
  // default: allowed command count
  max: 4
};
function _default(context) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
  var maxComma = options.max || defaultOptions.max;
  var {
    Syntax,
    RuleError,
    report,
    locator
  } = context;
  return {
    [Syntax.Paragraph](node) {
      var _paragraphSentence$ch;
      var paragraphSentence = (0, _sentenceSplitter.splitAST)(node);
      var sentences = (_paragraphSentence$ch = paragraphSentence.children.filter(node => node.type === _sentenceSplitter.SentenceSplitterSyntax.Sentence)) !== null && _paragraphSentence$ch !== void 0 ? _paragraphSentence$ch : [];
      sentences.forEach(sentence => {
        // Remove Code node for avoiding false-positive in `CODE`
        // This `sum(0,1,2,3,4,5,6,7,8,9,10)` is ok
        // â†’ This is ok
        var source = new _textlintUtilToString.StringSource(sentence, {
          replacer: _ref => {
            var {
              node,
              maskValue
            } = _ref;
            if (node.type === Syntax.Code) {
              return maskValue("_");
            }
          }
        });
        var sentenceValue = source.toString();
        var count = countOfComma(sentenceValue);
        if (count > maxComma) {
          var lastCommandIndex = sentenceValue.lastIndexOf(",");
          report(node, new RuleError("This sentence exceeds the maximum count of comma. Maximum is ".concat(maxComma, "."), {
            padding: locator.at(source.originalIndexFromIndex(lastCommandIndex))
          }));
        }
      });
    }
  };
}
//# sourceMappingURL=textlint-rule-max-comma.js.map