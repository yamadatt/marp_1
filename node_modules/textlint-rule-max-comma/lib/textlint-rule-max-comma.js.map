{"version":3,"file":"textlint-rule-max-comma.js","names":["Object","defineProperty","exports","value","default","_default","_sentenceSplitter","require","_textlintUtilToString","countOfComma","text","split","length","defaultOptions","max","context","options","arguments","undefined","maxComma","Syntax","RuleError","report","locator","Paragraph","node","_paragraphSentence$ch","paragraphSentence","splitAST","sentences","children","filter","type","SentenceSplitterSyntax","Sentence","forEach","sentence","source","StringSource","replacer","_ref","maskValue","Code","sentenceValue","toString","count","lastCommandIndex","lastIndexOf","concat","padding","at","originalIndexFromIndex"],"sources":["../src/textlint-rule-max-comma.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { splitAST, SentenceSplitterSyntax } from \"sentence-splitter\";\nimport { StringSource } from \"textlint-util-to-string\"\n\nfunction countOfComma(text) {\n    return text.split(\",\").length - 1;\n}\n\nconst defaultOptions = {\n    // default: allowed command count\n    max: 4\n};\nexport default function (context, options = defaultOptions) {\n    const maxComma = options.max || defaultOptions.max;\n    const { Syntax, RuleError, report, locator } = context;\n    return {\n        [Syntax.Paragraph](node) {\n            const paragraphSentence = splitAST(node)\n            const sentences = paragraphSentence.children.filter(node => node.type === SentenceSplitterSyntax.Sentence) ?? [];\n            sentences.forEach(sentence => {\n                // Remove Code node for avoiding false-positive in `CODE`\n                // This `sum(0,1,2,3,4,5,6,7,8,9,10)` is ok\n                // â†’ This is ok\n                const source = new StringSource(sentence, {\n                    replacer: ({ node, maskValue }) => {\n                        if (node.type === Syntax.Code) {\n                            return maskValue(\"_\");\n                        }\n                    }\n                });\n                const sentenceValue = source.toString();\n                const count = countOfComma(sentenceValue);\n                if (count > maxComma) {\n                    const lastCommandIndex = sentenceValue.lastIndexOf(\",\");\n                    report(node, new RuleError(`This sentence exceeds the maximum count of comma. Maximum is ${maxComma}.`, {\n                        padding: locator.at(source.originalIndexFromIndex(lastCommandIndex))\n                    }));\n                }\n            });\n        }\n    }\n}\n"],"mappings":"AAAA;AACA,YAAY;;AAACA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,OAAA,GAAAC,QAAA;AACb,IAAAC,iBAAA,GAAAC,OAAA;AACA,IAAAC,qBAAA,GAAAD,OAAA;AAEA,SAASE,YAAYA,CAACC,IAAI,EAAE;EACxB,OAAOA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,GAAG,CAAC;AACrC;AAEA,IAAMC,cAAc,GAAG;EACnB;EACAC,GAAG,EAAE;AACT,CAAC;AACc,SAAAT,SAAUU,OAAO,EAA4B;EAAA,IAA1BC,OAAO,GAAAC,SAAA,CAAAL,MAAA,QAAAK,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAGJ,cAAc;EACtD,IAAMM,QAAQ,GAAGH,OAAO,CAACF,GAAG,IAAID,cAAc,CAACC,GAAG;EAClD,IAAM;IAAEM,MAAM;IAAEC,SAAS;IAAEC,MAAM;IAAEC;EAAQ,CAAC,GAAGR,OAAO;EACtD,OAAO;IACH,CAACK,MAAM,CAACI,SAAS,EAAEC,IAAI,EAAE;MAAA,IAAAC,qBAAA;MACrB,IAAMC,iBAAiB,GAAG,IAAAC,0BAAQ,EAACH,IAAI,CAAC;MACxC,IAAMI,SAAS,IAAAH,qBAAA,GAAGC,iBAAiB,CAACG,QAAQ,CAACC,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACO,IAAI,KAAKC,wCAAsB,CAACC,QAAQ,CAAC,cAAAR,qBAAA,cAAAA,qBAAA,GAAI,EAAE;MAChHG,SAAS,CAACM,OAAO,CAACC,QAAQ,IAAI;QAC1B;QACA;QACA;QACA,IAAMC,MAAM,GAAG,IAAIC,kCAAY,CAACF,QAAQ,EAAE;UACtCG,QAAQ,EAAEC,IAAA,IAAyB;YAAA,IAAxB;cAAEf,IAAI;cAAEgB;YAAU,CAAC,GAAAD,IAAA;YAC1B,IAAIf,IAAI,CAACO,IAAI,KAAKZ,MAAM,CAACsB,IAAI,EAAE;cAC3B,OAAOD,SAAS,CAAC,GAAG,CAAC;YACzB;UACJ;QACJ,CAAC,CAAC;QACF,IAAME,aAAa,GAAGN,MAAM,CAACO,QAAQ,CAAC,CAAC;QACvC,IAAMC,KAAK,GAAGpC,YAAY,CAACkC,aAAa,CAAC;QACzC,IAAIE,KAAK,GAAG1B,QAAQ,EAAE;UAClB,IAAM2B,gBAAgB,GAAGH,aAAa,CAACI,WAAW,CAAC,GAAG,CAAC;UACvDzB,MAAM,CAACG,IAAI,EAAE,IAAIJ,SAAS,iEAAA2B,MAAA,CAAiE7B,QAAQ,QAAK;YACpG8B,OAAO,EAAE1B,OAAO,CAAC2B,EAAE,CAACb,MAAM,CAACc,sBAAsB,CAACL,gBAAgB,CAAC;UACvE,CAAC,CAAC,CAAC;QACP;MACJ,CAAC,CAAC;IACN;EACJ,CAAC;AACL"}