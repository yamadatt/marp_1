{"version":3,"file":"textlint-rule-no-nfd.js","names":["Object","defineProperty","exports","value","default","_matchIndex","require","_textlintRuleHelper","reporter","context","Syntax","RuleError","report","fixer","getSource","locator","helper","RuleHelper","Str","node","isChildNode","Link","Image","BlockQuote","Emphasis","text","matchCaptureGroupAll","forEach","_ref","index","dakutenChars","slice","nfdlized","replace","expectedText","normalize","ruleError","concat","padding","at","fix","replaceTextRange","_default","linter"],"sources":["../src/textlint-rule-no-nfd.ts"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { matchCaptureGroupAll } from \"match-index\"\nimport { RuleHelper } from \"textlint-rule-helper\";\nimport type { TextlintRuleReporter } from \"@textlint/types\";\n\nconst reporter: TextlintRuleReporter = function (context) {\n    const { Syntax, RuleError, report, fixer, getSource, locator } = context;\n    const helper = new RuleHelper(context);\n    return {\n        [Syntax.Str](node) {\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const text = getSource(node);\n            matchCaptureGroupAll(text, /([\\u309b\\u309c\\u309a\\u3099])/g).forEach(({ index }) => {\n                if (index === 0) {\n                    return;\n                }\n                // \\u309b\\u309c => \\u309a\\u3099\n                const dakutenChars = text.slice(index - 1, index + 1);\n                const nfdlized = dakutenChars.replace(\"\\u309B\", \"\\u3099\").replace(\"\\u309C\", \"\\u309A\");\n                const expectedText = nfdlized.normalize('NFC');\n                const ruleError = new RuleError(`Disallow to use NFD(well-known as UTF8-MAC 濁点): \"${dakutenChars}\" => \"${expectedText}\"`, {\n                    padding: locator.at(index),\n                    fix: fixer.replaceTextRange([index - 1, index + 1], expectedText)\n                });\n                report(node, ruleError);\n            });\n        }\n    }\n};\nexport default {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"AAAA;AACA,YAAY;;AAACA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,OAAA;AACb,IAAAC,WAAA,GAAAC,OAAA;AACA,IAAAC,mBAAA,GAAAD,OAAA;AAGA,IAAME,QAA8B,GAAG,SAAjCA,QAA8BA,CAAaC,OAAO,EAAE;EACtD,IAAM;IAAEC,MAAM;IAAEC,SAAS;IAAEC,MAAM;IAAEC,KAAK;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGN,OAAO;EACxE,IAAMO,MAAM,GAAG,IAAIC,8BAAU,CAACR,OAAO,CAAC;EACtC,OAAO;IACH,CAACC,MAAM,CAACQ,GAAG,EAAEC,IAAI,EAAE;MACf,IAAIH,MAAM,CAACI,WAAW,CAACD,IAAI,EAAE,CAACT,MAAM,CAACW,IAAI,EAAEX,MAAM,CAACY,KAAK,EAAEZ,MAAM,CAACa,UAAU,EAAEb,MAAM,CAACc,QAAQ,CAAC,CAAC,EAAE;QAC3F;MACJ;MACA,IAAMC,IAAI,GAAGX,SAAS,CAACK,IAAI,CAAC;MAC5B,IAAAO,gCAAoB,EAACD,IAAI,EAAE,+BAA+B,CAAC,CAACE,OAAO,CAACC,IAAA,IAAe;QAAA,IAAd;UAAEC;QAAM,CAAC,GAAAD,IAAA;QAC1E,IAAIC,KAAK,KAAK,CAAC,EAAE;UACb;QACJ;QACA;QACA,IAAMC,YAAY,GAAGL,IAAI,CAACM,KAAK,CAACF,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,CAAC,CAAC;QACrD,IAAMG,QAAQ,GAAGF,YAAY,CAACG,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC;QACrF,IAAMC,YAAY,GAAGF,QAAQ,CAACG,SAAS,CAAC,KAAK,CAAC;QAC9C,IAAMC,SAAS,GAAG,IAAIzB,SAAS,gEAAA0B,MAAA,CAAqDP,YAAY,cAAAO,MAAA,CAASH,YAAY,SAAK;UACtHI,OAAO,EAAEvB,OAAO,CAACwB,EAAE,CAACV,KAAK,CAAC;UAC1BW,GAAG,EAAE3B,KAAK,CAAC4B,gBAAgB,CAAC,CAACZ,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,CAAC,CAAC,EAAEK,YAAY;QACpE,CAAC,CAAC;QACFtB,MAAM,CAACO,IAAI,EAAEiB,SAAS,CAAC;MAC3B,CAAC,CAAC;IACN;EACJ,CAAC;AACL,CAAC;AAAC,IAAAM,QAAA,GACa;EACXC,MAAM,EAAEnC,QAAQ;EAChBK,KAAK,EAAEL;AACX,CAAC;AAAAN,OAAA,CAAAE,OAAA,GAAAsC,QAAA"}