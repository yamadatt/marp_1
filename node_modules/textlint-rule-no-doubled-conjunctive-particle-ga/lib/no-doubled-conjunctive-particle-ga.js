// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _textlintRuleHelper = require("textlint-rule-helper");
var _kuromojin = require("kuromojin");
var _sentenceSplitter = require("sentence-splitter");
var _textlintUtilToString = require("textlint-util-to-string");
/**
 * tokensから、区切り文字で分割したtokensの配列を返す
 * 結果は [[token, token], [token, token]] のような配列になる
 * @param {*[]} tokens
 * @param {string[]} separatorChars
 * @returns {*[][]}
 */
var splitTokensBySeparatorChars = (tokens, separatorChars) => {
  var results = [];
  var current = [];
  tokens.forEach(token => {
    if (separatorChars.includes(token.surface_form)) {
      results.push(current);
      current = [];
    } else {
      current.push(token);
    }
  });
  if (current.length > 0) {
    results.push(current);
  }
  return results;
};
var defaultOptions = {
  separatorChars: [".",
  // period
  "．",
  // (ja) zenkaku-period
  "。",
  // (ja) 句点
  "?",
  // question mark
  "!",
  //  exclamation mark
  "？",
  // (ja) zenkaku question mark
  "！" // (ja) zenkaku exclamation mark
  ]
};

/*
    1. Paragraph Node -> text
    2. text -> sentences
    3. tokenize sentence
    4. report error if found word that match the rule.

    TODO: need abstraction
 */
/**
 * @param {import("@textlint/types").TextlintRuleContext} context
 * @param {*} options
 * @returns {import("@textlint/types").TextlintRuleReportHandler}
 */
function _default(context) {
  var _options$separatorCha;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var separatorChars = (_options$separatorCha = options.separatorChars) !== null && _options$separatorCha !== void 0 ? _options$separatorCha : defaultOptions.separatorChars;
  var helper = new _textlintRuleHelper.RuleHelper(context);
  var {
    Syntax,
    report,
    getSource,
    RuleError,
    locator
  } = context;
  return {
    [Syntax.Paragraph](node) {
      if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
        return;
      }
      var isSentenceNode = node => {
        return node.type === _sentenceSplitter.SentenceSplitterSyntax.Sentence;
      };
      var sentences = (0, _sentenceSplitter.splitAST)(node, {
        SeparatorParser: {
          separatorCharacters: separatorChars
        }
      }).children.filter(isSentenceNode);
      var source = new _textlintUtilToString.StringSource(node);
      return (0, _kuromojin.getTokenizer)().then(tokenizer => {
        var checkSentence = sentence => {
          var sentenceText = getSource(sentence);
          var tokens = tokenizer.tokenizeForSentence(sentenceText);
          var isConjunctiveParticleGaToken = token => {
            return token.pos_detail_1 === "接続助詞" && token.surface_form === "が";
          };
          // カッコの中はセンテンスとして分解されないため、
          // 区切り文字で分割したtokensの配列を取得
          var tokensBySentence = splitTokensBySeparatorChars(tokens, separatorChars);
          tokensBySentence.forEach(tokens => {
            var conjunctiveParticleGaTokens = tokens.filter(isConjunctiveParticleGaToken);
            if (conjunctiveParticleGaTokens.length <= 1) {
              return;
            }
            var current = conjunctiveParticleGaTokens[0];
            var sentenceIndex = source.originalIndexFromPosition(sentence.loc.start) || 0;
            var currentIndex = sentenceIndex + (current.word_position - 1);
            report(node, new RuleError("\u6587\u4E2D\u306B\u9006\u63A5\u306E\u63A5\u7D9A\u52A9\u8A5E \"\u304C\" \u304C\u4E8C\u56DE\u4EE5\u4E0A\u4F7F\u308F\u308C\u3066\u3044\u307E\u3059\u3002", {
              padding: locator.range([currentIndex, currentIndex + 1])
            }));
          });
        };
        sentences.forEach(checkSentence);
      });
    }
  };
}
;
//# sourceMappingURL=no-doubled-conjunctive-particle-ga.js.map