{"version":3,"file":"no-doubled-conjunctive-particle-ga.js","names":["Object","defineProperty","exports","value","default","_default","_textlintRuleHelper","require","_kuromojin","_sentenceSplitter","_textlintUtilToString","splitTokensBySeparatorChars","tokens","separatorChars","results","current","forEach","token","includes","surface_form","push","length","defaultOptions","context","_options$separatorCha","options","arguments","undefined","helper","RuleHelper","Syntax","report","getSource","RuleError","locator","Paragraph","node","isChildNode","Link","Image","BlockQuote","Emphasis","isSentenceNode","type","SentenceSyntax","Sentence","sentences","splitAST","SeparatorParser","separatorCharacters","children","filter","source","StringSource","getTokenizer","then","tokenizer","checkSentence","sentence","sentenceText","tokenizeForSentence","isConjunctiveParticleGaToken","pos_detail_1","tokensBySentence","conjunctiveParticleGaTokens","sentenceIndex","originalIndexFromPosition","loc","start","currentIndex","word_position","padding","range"],"sources":["../src/no-doubled-conjunctive-particle-ga.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { RuleHelper } from \"textlint-rule-helper\";\nimport { getTokenizer } from \"kuromojin\";\nimport { splitAST, SentenceSplitterSyntax as SentenceSyntax } from \"sentence-splitter\";\nimport { StringSource } from \"textlint-util-to-string\";\n\n\n/**\n * tokensから、区切り文字で分割したtokensの配列を返す\n * 結果は [[token, token], [token, token]] のような配列になる\n * @param {*[]} tokens\n * @param {string[]} separatorChars\n * @returns {*[][]}\n */\nconst splitTokensBySeparatorChars = (tokens, separatorChars) => {\n    const results = [];\n    let current = [];\n    tokens.forEach(token => {\n        if (separatorChars.includes(token.surface_form)) {\n            results.push(current);\n            current = [];\n        } else {\n            current.push(token);\n        }\n    });\n    if (current.length > 0) {\n        results.push(current);\n    }\n    return results;\n}\n\nconst defaultOptions = {\n    separatorChars: [\n        \".\", // period\n        \"．\", // (ja) zenkaku-period\n        \"。\", // (ja) 句点\n        \"?\", // question mark\n        \"!\", //  exclamation mark\n        \"？\", // (ja) zenkaku question mark\n        \"！\" // (ja) zenkaku exclamation mark\n    ]\n};\n\n/*\n    1. Paragraph Node -> text\n    2. text -> sentences\n    3. tokenize sentence\n    4. report error if found word that match the rule.\n\n    TODO: need abstraction\n */\n/**\n * @param {import(\"@textlint/types\").TextlintRuleContext} context\n * @param {*} options\n * @returns {import(\"@textlint/types\").TextlintRuleReportHandler}\n */\nexport default function (context, options = {}) {\n    const separatorChars = options.separatorChars ?? defaultOptions.separatorChars;\n    const helper = new RuleHelper(context);\n    const { Syntax, report, getSource, RuleError, locator } = context;\n    return {\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const isSentenceNode = node => {\n                return node.type === SentenceSyntax.Sentence;\n            };\n            const sentences = splitAST(node, {\n                SeparatorParser: {\n                    separatorCharacters: separatorChars\n                }\n            }).children.filter(isSentenceNode);\n            const source = new StringSource(node);\n            return getTokenizer().then(tokenizer => {\n                const checkSentence = (sentence) => {\n                    const sentenceText = getSource(sentence);\n                    const tokens = tokenizer.tokenizeForSentence(sentenceText);\n                    const isConjunctiveParticleGaToken = token => {\n                        return token.pos_detail_1 === \"接続助詞\" && token.surface_form === \"が\";\n                    };\n                    // カッコの中はセンテンスとして分解されないため、\n                    // 区切り文字で分割したtokensの配列を取得\n                    const tokensBySentence = splitTokensBySeparatorChars(tokens, separatorChars);\n                    tokensBySentence.forEach(tokens => {\n                        const conjunctiveParticleGaTokens = tokens.filter(isConjunctiveParticleGaToken);\n                        if (conjunctiveParticleGaTokens.length <= 1) {\n                            return;\n                        }\n                        const current = conjunctiveParticleGaTokens[0];\n                        const sentenceIndex = source.originalIndexFromPosition(sentence.loc.start) || 0;\n                        const currentIndex = sentenceIndex + (current.word_position - 1);\n                        report(node, new RuleError(`文中に逆接の接続助詞 \"が\" が二回以上使われています。`, {\n                            padding: locator.range([currentIndex, currentIndex + 1])\n                        }));\n                    });\n                }\n                sentences.forEach(checkSentence);\n            });\n        }\n    }\n};\n"],"mappings":"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"}