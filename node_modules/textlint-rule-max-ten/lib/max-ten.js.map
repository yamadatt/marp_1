{"version":3,"file":"max-ten.js","names":["_textlintRuleHelper","require","_kuromojin","_sentenceSplitter","_textlintUtilToString","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","defaultOptions","max","strict","touten","kuten","isSandwichedMeishi","_ref","before","token","after","pos","is括弧","test","pos_detail_1","surface_form","findSiblingMeaningToken","_ref2","tokens","currentIndex","direction","delta","sibilingToken","module","exports","context","_options$max","_options$strict","_options$touten","_options$kuten","options","length","maxLen","isStrict","helper","RuleHelper","Syntax","RuleError","report","locator","separatorCharacters","concat","Paragraph","node","isChildNode","BlockQuote","resultNode","splitAST","SeparatorParser","sentences","children","filter","childNode","type","SentenceSyntax","Sentence","checkSentence","_ref3","sentence","source","StringSource","replacer","_ref4","maskValue","Code","text","toString","tokenize","currentTenCount","lastToken","forEach","index","surface","isSandwiched","includes","positionInSentence","originalIndexFromIndex","word_position","range","ruleError","padding","_x","all","map"],"sources":["../src/max-ten.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { RuleHelper } from \"textlint-rule-helper\";\nimport { tokenize } from \"kuromojin\";\nimport { splitAST, SentenceSplitterSyntax as SentenceSyntax } from \"sentence-splitter\";\nimport { StringSource } from \"textlint-util-to-string\";\n\nconst defaultOptions = {\n    // 1文に利用できる最大の、の数\n    max: 3,\n    // 例外ルールを適応するかどうか,\n    strict: false,\n    // 読点として扱う文字\n    // https://ja.wikipedia.org/wiki/%E8%AA%AD%E7%82%B9\n    touten: \"、\",\n    // 句点として扱う文字\n    // https://ja.wikipedia.org/wiki/%E5%8F%A5%E7%82%B9\n    kuten: \"。\"\n};\n\nfunction isSandwichedMeishi({ before, token, after }) {\n    if (before === undefined || after === undefined || token === undefined) {\n        return false;\n    }\n    return before.pos === \"名詞\" && after.pos === \"名詞\";\n}\n\n/**\n * 括弧のトークンかどうか\n * @param token\n * @returns {boolean}\n */\nfunction is括弧(token) {\n    if (token.pos === \"記号\" && /^括弧/.test(token.pos_detail_1)) {\n        return true;\n    }\n    if (token.surface_form === \"(\" || token.surface_form === \")\") {\n        return true;\n    }\n    return false;\n}\n\n/**\n * 括弧などの記号的なTokenはスキップとして隣接するTokenを探す\n * @see https://github.com/textlint-ja/textlint-rule-max-ten/issues/12\n * @param {*[]} tokens\n * @param {number} currentIndex\n * @param {\"prev\"|\"next\"} direction\n * @returns {undefined | *}\n */\nfunction findSiblingMeaningToken({ tokens, currentIndex, direction }) {\n    const delta = direction === \"prev\" ? -1 : 1;\n    const sibilingToken = tokens[currentIndex + delta];\n    if (!sibilingToken) {\n        return;\n    }\n    // 括弧はスキップして、隣接Nodeを探す\n    if (is括弧(sibilingToken)) {\n        return findSiblingMeaningToken({\n            tokens,\n            currentIndex: currentIndex + delta,\n            direction\n        });\n    }\n    return sibilingToken;\n}\n\n/**\n * @param {import(\"@textlint/types\").TextlintRuleContext} context\n * @param {typeof defaultOptions} [options]\n * @return {import(\"@textlint/types\").TextlintFilterRuleReportHandler}}\n */\nmodule.exports = function (context, options = {}) {\n    const maxLen = options.max ?? defaultOptions.max;\n    const isStrict = options.strict ?? defaultOptions.strict;\n    const touten = options.touten ?? defaultOptions.touten;\n    const kuten = options.kuten ?? defaultOptions.kuten;\n    const helper = new RuleHelper(context);\n    const { Syntax, RuleError, report, locator } = context;\n    const separatorCharacters = [\n        \"?\", // question mark\n        \"!\", //  exclamation mark\n        \"？\", // (ja) zenkaku question mark\n        \"！\" // (ja) zenkaku exclamation mark\n    ].concat(kuten);\n    return {\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n                return;\n            }\n            const resultNode = splitAST(node, {\n                SeparatorParser: {\n                    separatorCharacters: separatorCharacters\n                }\n            });\n            const sentences = resultNode.children.filter((childNode) => childNode.type === SentenceSyntax.Sentence);\n            /*\n             <p>\n             <str><code><img><str>\n             <str>\n             </p>\n             */\n            /*\n             # workflow\n             1. split text to sentences\n             2. sentence to tokens\n             3. check tokens\n             */\n            const checkSentence = async (sentence) => {\n                const source = new StringSource(sentence, {\n                    replacer({ node, maskValue }) {\n                        if (node.type === Syntax.Code) {\n                            return maskValue(\"_\");\n                        }\n                    }\n                });\n                const text = source.toString();\n                const tokens = await tokenize(text);\n                let currentTenCount = 0;\n                let lastToken = null;\n                tokens.forEach((token, index) => {\n                    const surface = token.surface_form;\n                    if (surface === touten) {\n                        // 名詞に囲まわれている場合は例外とする\n                        const isSandwiched = isSandwichedMeishi({\n                            before: findSiblingMeaningToken({\n                                tokens,\n                                currentIndex: index,\n                                direction: \"prev\"\n                            }),\n                            token: token,\n                            after: findSiblingMeaningToken({\n                                tokens,\n                                currentIndex: index,\n                                direction: \"next\"\n                            })\n                        });\n                        // strictなら例外を例外としない\n                        if (!isStrict && isSandwiched) {\n                            return;\n                        }\n                        currentTenCount++;\n                        lastToken = token;\n                    }\n                    if (separatorCharacters.includes(surface)) {\n                        // reset\n                        currentTenCount = 0;\n                    }\n                    // report\n                    if (currentTenCount > maxLen) {\n                        const positionInSentence = source.originalIndexFromIndex(lastToken.word_position - 1);\n                        // relative index from Paragraph Node\n                        // Sentence start(relative) + word position(relative)\n                        const index = sentence.range[0] - node.range[0] + positionInSentence;\n                        const ruleError = new context.RuleError(\n                            `一つの文で\"${touten}\"を${maxLen + 1}つ以上使用しています`,\n                            {\n                                padding: locator.range([index, index + touten.length])\n                            }\n                        );\n                        report(node, ruleError);\n                        currentTenCount = 0;\n                    }\n                });\n            };\n            return Promise.all(sentences.map(checkSentence));\n        }\n    };\n};\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,IAAAA,mBAAA,GAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,iBAAA,GAAAF,OAAA;AACA,IAAAG,qBAAA,GAAAH,OAAA;AAAuD,SAAAI,mBAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,EAAAC,GAAA,EAAAC,GAAA,cAAAC,IAAA,GAAAP,GAAA,CAAAK,GAAA,EAAAC,GAAA,OAAAE,KAAA,GAAAD,IAAA,CAAAC,KAAA,WAAAC,KAAA,IAAAP,MAAA,CAAAO,KAAA,iBAAAF,IAAA,CAAAG,IAAA,IAAAT,OAAA,CAAAO,KAAA,YAAAG,OAAA,CAAAV,OAAA,CAAAO,KAAA,EAAAI,IAAA,CAAAT,KAAA,EAAAC,MAAA;AAAA,SAAAS,kBAAAC,EAAA,6BAAAC,IAAA,SAAAC,IAAA,GAAAC,SAAA,aAAAN,OAAA,WAAAV,OAAA,EAAAC,MAAA,QAAAF,GAAA,GAAAc,EAAA,CAAAI,KAAA,CAAAH,IAAA,EAAAC,IAAA,YAAAb,MAAAK,KAAA,IAAAT,kBAAA,CAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,UAAAI,KAAA,cAAAJ,OAAAe,GAAA,IAAApB,kBAAA,CAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,WAAAe,GAAA,KAAAhB,KAAA,CAAAiB,SAAA;AAEvD,IAAMC,cAAc,GAAG;EACnB;EACAC,GAAG,EAAE,CAAC;EACN;EACAC,MAAM,EAAE,KAAK;EACb;EACA;EACAC,MAAM,EAAE,GAAG;EACX;EACA;EACAC,KAAK,EAAE;AACX,CAAC;AAED,SAASC,kBAAkBA,CAAAC,IAAA,EAA2B;EAAA,IAA1B;IAAEC,MAAM;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAAH,IAAA;EAChD,IAAIC,MAAM,KAAKR,SAAS,IAAIU,KAAK,KAAKV,SAAS,IAAIS,KAAK,KAAKT,SAAS,EAAE;IACpE,OAAO,KAAK;EAChB;EACA,OAAOQ,MAAM,CAACG,GAAG,KAAK,IAAI,IAAID,KAAK,CAACC,GAAG,KAAK,IAAI;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAACH,KAAK,EAAE;EACjB,IAAIA,KAAK,CAACE,GAAG,KAAK,IAAI,IAAI,KAAK,CAACE,IAAI,CAACJ,KAAK,CAACK,YAAY,CAAC,EAAE;IACtD,OAAO,IAAI;EACf;EACA,IAAIL,KAAK,CAACM,YAAY,KAAK,GAAG,IAAIN,KAAK,CAACM,YAAY,KAAK,GAAG,EAAE;IAC1D,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAAAC,KAAA,EAAsC;EAAA,IAArC;IAAEC,MAAM;IAAEC,YAAY;IAAEC;EAAU,CAAC,GAAAH,KAAA;EAChE,IAAMI,KAAK,GAAGD,SAAS,KAAK,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;EAC3C,IAAME,aAAa,GAAGJ,MAAM,CAACC,YAAY,GAAGE,KAAK,CAAC;EAClD,IAAI,CAACC,aAAa,EAAE;IAChB;EACJ;EACA;EACA,IAAIV,IAAI,CAACU,aAAa,CAAC,EAAE;IACrB,OAAON,uBAAuB,CAAC;MAC3BE,MAAM;MACNC,YAAY,EAAEA,YAAY,GAAGE,KAAK;MAClCD;IACJ,CAAC,CAAC;EACN;EACA,OAAOE,aAAa;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,UAAUC,OAAO,EAAgB;EAAA,IAAAC,YAAA,EAAAC,eAAA,EAAAC,eAAA,EAAAC,cAAA;EAAA,IAAdC,OAAO,GAAAjC,SAAA,CAAAkC,MAAA,QAAAlC,SAAA,QAAAG,SAAA,GAAAH,SAAA,MAAG,CAAC,CAAC;EAC5C,IAAMmC,MAAM,IAAAN,YAAA,GAAGI,OAAO,CAAC5B,GAAG,cAAAwB,YAAA,cAAAA,YAAA,GAAIzB,cAAc,CAACC,GAAG;EAChD,IAAM+B,QAAQ,IAAAN,eAAA,GAAGG,OAAO,CAAC3B,MAAM,cAAAwB,eAAA,cAAAA,eAAA,GAAI1B,cAAc,CAACE,MAAM;EACxD,IAAMC,MAAM,IAAAwB,eAAA,GAAGE,OAAO,CAAC1B,MAAM,cAAAwB,eAAA,cAAAA,eAAA,GAAI3B,cAAc,CAACG,MAAM;EACtD,IAAMC,KAAK,IAAAwB,cAAA,GAAGC,OAAO,CAACzB,KAAK,cAAAwB,cAAA,cAAAA,cAAA,GAAI5B,cAAc,CAACI,KAAK;EACnD,IAAM6B,MAAM,GAAG,IAAIC,8BAAU,CAACV,OAAO,CAAC;EACtC,IAAM;IAAEW,MAAM;IAAEC,SAAS;IAAEC,MAAM;IAAEC;EAAQ,CAAC,GAAGd,OAAO;EACtD,IAAMe,mBAAmB,GAAG,CACxB,GAAG;EAAE;EACL,GAAG;EAAE;EACL,GAAG;EAAE;EACL,GAAG,CAAC;EAAA,CACP,CAACC,MAAM,CAACpC,KAAK,CAAC;EACf,OAAO;IACH,CAAC+B,MAAM,CAACM,SAAS,EAAEC,IAAI,EAAE;MACrB,IAAIT,MAAM,CAACU,WAAW,CAACD,IAAI,EAAE,CAACP,MAAM,CAACS,UAAU,CAAC,CAAC,EAAE;QAC/C;MACJ;MACA,IAAMC,UAAU,GAAG,IAAAC,0BAAQ,EAACJ,IAAI,EAAE;QAC9BK,eAAe,EAAE;UACbR,mBAAmB,EAAEA;QACzB;MACJ,CAAC,CAAC;MACF,IAAMS,SAAS,GAAGH,UAAU,CAACI,QAAQ,CAACC,MAAM,CAAEC,SAAS,IAAKA,SAAS,CAACC,IAAI,KAAKC,wCAAc,CAACC,QAAQ,CAAC;MACvG;AACZ;AACA;AACA;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;AACA;MACY,IAAMC,aAAa;QAAA,IAAAC,KAAA,GAAAhE,iBAAA,CAAG,WAAOiE,QAAQ,EAAK;UACtC,IAAMC,MAAM,GAAG,IAAIC,kCAAY,CAACF,QAAQ,EAAE;YACtCG,QAAQA,CAAAC,KAAA,EAAsB;cAAA,IAArB;gBAAEnB,IAAI;gBAAEoB;cAAU,CAAC,GAAAD,KAAA;cACxB,IAAInB,IAAI,CAACU,IAAI,KAAKjB,MAAM,CAAC4B,IAAI,EAAE;gBAC3B,OAAOD,SAAS,CAAC,GAAG,CAAC;cACzB;YACJ;UACJ,CAAC,CAAC;UACF,IAAME,IAAI,GAAGN,MAAM,CAACO,QAAQ,CAAC,CAAC;UAC9B,IAAMhD,MAAM,SAAS,IAAAiD,mBAAQ,EAACF,IAAI,CAAC;UACnC,IAAIG,eAAe,GAAG,CAAC;UACvB,IAAIC,SAAS,GAAG,IAAI;UACpBnD,MAAM,CAACoD,OAAO,CAAC,CAAC7D,KAAK,EAAE8D,KAAK,KAAK;YAC7B,IAAMC,OAAO,GAAG/D,KAAK,CAACM,YAAY;YAClC,IAAIyD,OAAO,KAAKpE,MAAM,EAAE;cACpB;cACA,IAAMqE,YAAY,GAAGnE,kBAAkB,CAAC;gBACpCE,MAAM,EAAEQ,uBAAuB,CAAC;kBAC5BE,MAAM;kBACNC,YAAY,EAAEoD,KAAK;kBACnBnD,SAAS,EAAE;gBACf,CAAC,CAAC;gBACFX,KAAK,EAAEA,KAAK;gBACZC,KAAK,EAAEM,uBAAuB,CAAC;kBAC3BE,MAAM;kBACNC,YAAY,EAAEoD,KAAK;kBACnBnD,SAAS,EAAE;gBACf,CAAC;cACL,CAAC,CAAC;cACF;cACA,IAAI,CAACa,QAAQ,IAAIwC,YAAY,EAAE;gBAC3B;cACJ;cACAL,eAAe,EAAE;cACjBC,SAAS,GAAG5D,KAAK;YACrB;YACA,IAAI+B,mBAAmB,CAACkC,QAAQ,CAACF,OAAO,CAAC,EAAE;cACvC;cACAJ,eAAe,GAAG,CAAC;YACvB;YACA;YACA,IAAIA,eAAe,GAAGpC,MAAM,EAAE;cAC1B,IAAM2C,kBAAkB,GAAGhB,MAAM,CAACiB,sBAAsB,CAACP,SAAS,CAACQ,aAAa,GAAG,CAAC,CAAC;cACrF;cACA;cACA,IAAMN,MAAK,GAAGb,QAAQ,CAACoB,KAAK,CAAC,CAAC,CAAC,GAAGnC,IAAI,CAACmC,KAAK,CAAC,CAAC,CAAC,GAAGH,kBAAkB;cACpE,IAAMI,SAAS,GAAG,IAAItD,OAAO,CAACY,SAAS,oCAAAI,MAAA,CAC1BrC,MAAM,cAAAqC,MAAA,CAAKT,MAAM,GAAG,CAAC,mEAC9B;gBACIgD,OAAO,EAAEzC,OAAO,CAACuC,KAAK,CAAC,CAACP,MAAK,EAAEA,MAAK,GAAGnE,MAAM,CAAC2B,MAAM,CAAC;cACzD,CACJ,CAAC;cACDO,MAAM,CAACK,IAAI,EAAEoC,SAAS,CAAC;cACvBX,eAAe,GAAG,CAAC;YACvB;UACJ,CAAC,CAAC;QACN,CAAC;QAAA,gBAxDKZ,aAAaA,CAAAyB,EAAA;UAAA,OAAAxB,KAAA,CAAA3D,KAAA,OAAAD,SAAA;QAAA;MAAA,GAwDlB;MACD,OAAON,OAAO,CAAC2F,GAAG,CAACjC,SAAS,CAACkC,GAAG,CAAC3B,aAAa,CAAC,CAAC;IACpD;EACJ,CAAC;AACL,CAAC"}