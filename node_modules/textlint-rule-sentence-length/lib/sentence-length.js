"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _sentenceSplitter = require("sentence-splitter");
var _textlintUtilToString = require("textlint-util-to-string");
var _textlintRuleHelper = require("textlint-rule-helper");
var _regexpStringMatcher = require("@textlint/regexp-string-matcher");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function removeRangeFromString(text, regExpStrings) {
  var patterns = regExpStrings.map(pattern => {
    return (0, _regexpStringMatcher.createRegExp)(pattern);
  });
  var result = text;
  patterns.forEach(pattern => {
    result = result.replace(pattern, "");
  });
  return result;
}
var defaultOptions = {
  max: 100,
  skipPatterns: [],
  skipUrlStringLink: true,
  /**
   * @deprecated
   */
  exclusionPatterns: [],
  countBy: "codeunits"
};
var isSentenceNode = node => {
  return node.type === _sentenceSplitter.SentenceSplitterSyntax.Sentence;
};

/**
 * A count of the number of code units currently in the string.
 * @param s string
 */
var strLenByCodeUnits = s => s.length;
/**
 * A count of the number of codepoint currently in the string.
 *
 * Complexity: O(n)
 * @param s string
 */
var strLenByCodePoints = s => {
  var i = 0;
  for (var _ of s) {
    ++i;
  }
  return i;
};
var reporter = function reporter(context) {
  var _options$max, _ref, _options$skipPatterns, _options$skipUrlStrin;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var maxLength = (_options$max = options.max) !== null && _options$max !== void 0 ? _options$max : defaultOptions.max;
  var skipPatterns = (_ref = (_options$skipPatterns = options.skipPatterns) !== null && _options$skipPatterns !== void 0 ? _options$skipPatterns : options.exclusionPatterns) !== null && _ref !== void 0 ? _ref : defaultOptions.skipPatterns;
  var skipUrlStringLink = (_options$skipUrlStrin = options.skipUrlStringLink) !== null && _options$skipUrlStrin !== void 0 ? _options$skipUrlStrin : defaultOptions.skipUrlStringLink;
  var strLen = options.countBy == null || options.countBy === "codeunits" ? strLenByCodeUnits : strLenByCodePoints;
  var helper = new _textlintRuleHelper.RuleHelper(context);
  var {
    Syntax,
    RuleError,
    report
  } = context;
  var isUrlStringLink = node => {
    if (node.type !== Syntax.Link) {
      return false;
    }
    var linkNode = node;
    var nodeText = new _textlintUtilToString.StringSource(linkNode).toString();
    return node.url === nodeText;
  };
  // toPlainText
  return {
    [Syntax.Document](node) {
      if (options.exclusionPatterns) {
        report(node, new RuleError("exclusionPatterns is deprecated. Use skipPatterns instead."));
      }
    },
    [Syntax.Paragraph](node) {
      if (helper.isChildNode(node, [Syntax.BlockQuote])) {
        return;
      }
      // If a single Link node in the paragraph node, should be ignore the link length
      var isChildrenSingleLinkNode = node.children.length === 1 && node.children[0].type === Syntax.Link;
      if (isChildrenSingleLinkNode) {
        return;
      }
      // empty break line == split sentence
      var sentenceRootNode = (0, _sentenceSplitter.splitAST)(node);
      sentenceRootNode.children.filter(isSentenceNode).forEach(sentence => {
        var filteredSentence = skipUrlStringLink ? _objectSpread(_objectSpread({}, sentence), {}, {
          children: sentence.children.filter(sentenceChildNode => {
            return !isUrlStringLink(sentenceChildNode);
          })
        }) : sentence;
        var source = new _textlintUtilToString.StringSource(filteredSentence);
        var actualText = source.toString();
        var sentenceText = removeRangeFromString(actualText, skipPatterns);
        // larger than > 100
        var actualTextLength = strLen(actualText);
        var sentenceLength = strLen(sentenceText);
        if (sentenceLength > maxLength) {
          var startLine = filteredSentence.loc.start.line;
          report(
          // @ts-expect-error: It is compatible with textlint node
          filteredSentence, new RuleError("Line ".concat(startLine, " sentence length(").concat(sentenceLength !== actualTextLength ? "".concat(sentenceLength, ", original:").concat(actualTextLength) : sentenceLength, ") exceeds the maximum sentence length of ").concat(maxLength, ".\nOver ").concat(sentenceLength - maxLength, " characters.")));
        }
      });
    }
  };
};
var _default = exports.default = reporter;
//# sourceMappingURL=sentence-length.js.map