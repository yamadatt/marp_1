"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var sentence_splitter_1 = require("sentence-splitter");
var textlint_util_to_string_1 = require("textlint-util-to-string");
var textlint_rule_helper_1 = require("textlint-rule-helper");
var regexp_string_matcher_1 = require("@textlint/regexp-string-matcher");
function removeRangeFromString(text, regExpStrings) {
    var patterns = regExpStrings.map(function (pattern) {
        return (0, regexp_string_matcher_1.createRegExp)(pattern);
    });
    var result = text;
    patterns.forEach(function (pattern) {
        result = result.replace(pattern, "");
    });
    return result;
}
var defaultOptions = {
    max: 100,
    skipPatterns: [],
    skipUrlStringLink: true,
    /**
     * @deprecated
     */
    exclusionPatterns: [],
    countBy: "codeunits"
};
var isSentenceNode = function (node) {
    return node.type === sentence_splitter_1.SentenceSplitterSyntax.Sentence;
};
/**
 * A count of the number of code units currently in the string.
 * @param s string
 */
var strLenByCodeUnits = function (s) { return s.length; };
/**
 * A count of the number of codepoint currently in the string.
 *
 * Complexity: O(n)
 * @param s string
 */
var strLenByCodePoints = function (s) {
    var i = 0;
    for (var _i = 0, s_1 = s; _i < s_1.length; _i++) {
        var _ = s_1[_i];
        ++i;
    }
    return i;
};
var reporter = function (context, options) {
    var _a;
    var _b, _c, _d, _e;
    if (options === void 0) { options = {}; }
    var maxLength = (_b = options.max) !== null && _b !== void 0 ? _b : defaultOptions.max;
    var skipPatterns = (_d = (_c = options.skipPatterns) !== null && _c !== void 0 ? _c : options.exclusionPatterns) !== null && _d !== void 0 ? _d : defaultOptions.skipPatterns;
    var skipUrlStringLink = (_e = options.skipUrlStringLink) !== null && _e !== void 0 ? _e : defaultOptions.skipUrlStringLink;
    var strLen = options.countBy == null || options.countBy === "codeunits" ? strLenByCodeUnits : strLenByCodePoints;
    var helper = new textlint_rule_helper_1.RuleHelper(context);
    var Syntax = context.Syntax, RuleError = context.RuleError, report = context.report;
    var isUrlStringLink = function (node) {
        if (node.type !== Syntax.Link) {
            return false;
        }
        var linkNode = node;
        var nodeText = new textlint_util_to_string_1.StringSource(linkNode).toString();
        return node.url === nodeText;
    };
    // toPlainText
    return _a = {},
        _a[Syntax.Document] = function (node) {
            if (options.exclusionPatterns) {
                report(node, new RuleError("exclusionPatterns is deprecated. Use skipPatterns instead."));
            }
        },
        _a[Syntax.Paragraph] = function (node) {
            if (helper.isChildNode(node, [Syntax.BlockQuote])) {
                return;
            }
            // If a single Link node in the paragraph node, should be ignore the link length
            var isChildrenSingleLinkNode = node.children.length === 1 && node.children[0].type === Syntax.Link;
            if (isChildrenSingleLinkNode) {
                return;
            }
            // empty break line == split sentence
            var sentenceRootNode = (0, sentence_splitter_1.splitAST)(node);
            sentenceRootNode.children.filter(isSentenceNode).forEach(function (sentence) {
                var filteredSentence = skipUrlStringLink
                    ? __assign(__assign({}, sentence), { children: sentence.children.filter(function (sentenceChildNode) {
                            return !isUrlStringLink(sentenceChildNode);
                        }) }) : sentence;
                var source = new textlint_util_to_string_1.StringSource(filteredSentence);
                var actualText = source.toString();
                var sentenceText = removeRangeFromString(actualText, skipPatterns);
                // larger than > 100
                var actualTextLength = strLen(actualText);
                var sentenceLength = strLen(sentenceText);
                if (sentenceLength > maxLength) {
                    var startLine = filteredSentence.loc.start.line;
                    report(
                    // @ts-expect-error: It is compatible with textlint node
                    filteredSentence, new RuleError("Line ".concat(startLine, " sentence length(").concat(sentenceLength !== actualTextLength
                        ? "".concat(sentenceLength, ", original:").concat(actualTextLength)
                        : sentenceLength, ") exceeds the maximum sentence length of ").concat(maxLength, ".\nOver ").concat(sentenceLength - maxLength, " characters.")));
                }
            });
        },
        _a;
};
exports.default = reporter;
//# sourceMappingURL=sentence-length.js.map