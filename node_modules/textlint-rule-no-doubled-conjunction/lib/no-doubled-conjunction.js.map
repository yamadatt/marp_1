{"version":3,"file":"no-doubled-conjunction.js","names":["Object","defineProperty","exports","value","default","_default","_textlintRuleHelper","require","_kuromojin","_sentenceSplitter","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","context","options","length","helper","RuleHelper","Syntax","report","RuleError","locator","Paragraph","node","isChildNode","Link","Image","BlockQuote","Emphasis","isSentenceNode","type","SentenceSyntax","Sentence","sentences","splitAST","SeparatorParser","separatorCharacters","children","filter","selectConjenction","_ref","sentence","tokens","tokenize","raw","conjunctionTokens","token","index","prevToken","pos_detail_1","pos","_x","prev_token","result","all","map","reduce","prev","current","current_tokens","prev_sentence","prev_tokens","surface_form","conjunctionSurface","concat","padding","range","word_position"],"sources":["../src/no-doubled-conjunction.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { RuleHelper } from \"textlint-rule-helper\";\nimport { tokenize } from \"kuromojin\";\nimport { splitAST, SentenceSplitterSyntax as SentenceSyntax } from \"sentence-splitter\";\n\n/*\n    1. Paragraph Node -> text\n    2. text -> sentences\n    3. tokenize sentence\n    4. report error if found word that match the rule.\n\n    TODO: need abstraction\n */\n/**\n * @param {import(\"@textlint/types\").TextlintRuleContext}context\n * @param {*} options\n * @returns {import(\"@textlint/types\").TextlintRuleReporter}\n */\nexport default function (context, options = {}) {\n    const helper = new RuleHelper(context);\n    const { Syntax, report, RuleError, locator } = context;\n    return {\n        async [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const isSentenceNode = (node) => node.type === SentenceSyntax.Sentence;\n            const sentences = splitAST(node, {\n                SeparatorParser: {\n                    separatorCharacters: [\n                        \".\", // period\n                        \"．\", // (ja) zenkaku-period\n                        \"。\", // (ja) 句点\n                        \"?\", // question mark\n                        \"!\", //  exclamation mark\n                        \"？\", // (ja) zenkaku question mark\n                        \"！\" // (ja) zenkaku exclamation mark\n                    ]\n                }\n            }).children.filter(isSentenceNode)\n            // if not have a sentence, early return\n            // It is for avoiding error of emptyArray.reduce().\n            if (sentences.length === 0) {\n                return;\n            }\n            const selectConjenction = async (sentence) => {\n                const tokens = await tokenize(sentence.raw);\n                const conjunctionTokens = tokens.filter((token, index) => {\n                    const prevToken = tokens[index - 1];\n                    // スペースが切れ目として認識されてしまう問題を回避\n                    // https://github.com/textlint-ja/textlint-rule-no-doubled-conjunction/issues/14\n                    if (prevToken && prevToken.pos_detail_1 === \"空白\" && token.pos === \"接続詞\") {\n                        return false;\n                    }\n                    return token.pos === \"接続詞\"\n                });\n                return [sentence, conjunctionTokens];\n            }\n            let prev_token = null;\n            const result = await Promise.all(sentences.map(selectConjenction));\n            result.reduce(((prev, current) => {\n                const [sentence, current_tokens] = current;\n                const [prev_sentence, prev_tokens] = prev;\n                let token = prev_token;\n                if (prev_tokens && prev_tokens.length > 0) {\n                    token = prev_tokens[0];\n                }\n                if (current_tokens.length > 0) {\n                    if (token && current_tokens[0].surface_form === token.surface_form) {\n                        const conjunctionSurface = token.surface_form;\n                        // padding position\n                        report(sentence,\n                            new RuleError(`同じ接続詞（${conjunctionSurface}）が連続して使われています。`, {\n                                padding: locator.range([\n                                    token.word_position - 1,\n                                    token.word_position + conjunctionSurface.length - 1\n                                ])\n                            }));\n                    }\n                }\n                prev_token = token;\n                return current;\n            }));\n        }\n    }\n};\n"],"mappings":"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"}