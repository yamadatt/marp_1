"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _path = _interopRequireDefault(require("path"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _getConfigBaseDir = require("@textlint/get-config-base-dir");

var _regexpStringMatcher = require("@textlint/regexp-string-matcher");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var loadAllowlistConfigFile = (baseDirectory, filePath) => {
  // It is for suppoting browser bundler.
  var fs = require("fs");

  var configFilePath = _path.default.resolve(baseDirectory, filePath);

  var extName = _path.default.extname(configFilePath);

  var configFile = fs.readFileSync(configFilePath);

  if (extName == ".json") {
    return JSON.parse(configFile);
  } else if (/\.(yml|yaml)$/.test(extName)) {
    return _jsYaml.default.load(configFile);
  }

  throw new Error("Unsupported file type: ".concat(filePath));
};

var getAllowWordsFromFiles = (files, baseDirectory) => {
  var results = [];
  files.forEach(filePath => {
    var config = loadAllowlistConfigFile(baseDirectory, filePath);

    if (config && Array.isArray(config)) {
      results = results.concat(config);
    } else {
      throw new Error("This allow file is not allow word list: ".concat(filePath));
    }
  });
  return results;
};

var defaultOptions = {
  /**
   * allowing list strings or RegExp-like strings
   *
   * [
   *     "string",
   *     "/\\d+/",
   *     "/^===/m",
   * ]
   */
  allow: [],

  /**
   * file path list that includes allow words.
   */
  allowlistConfigPaths: []
};

function _default(context, options) {
  var {
    Syntax,
    shouldIgnore,
    getSource
  } = context;
  var baseDirectory = (0, _getConfigBaseDir.getConfigBaseDir)(context) || process.cwd();
  var allowWords = options.allow || defaultOptions.allow;
  var allowlistConfigPaths = options.allowlistConfigPaths ? getAllowWordsFromFiles(options.allowlistConfigPaths, baseDirectory) : [];
  var allAllowWords = allowWords.concat(allowlistConfigPaths);
  return {
    [Syntax.Document](node) {
      var text = getSource(node);
      var matchResults = (0, _regexpStringMatcher.matchPatterns)(text, allAllowWords);
      matchResults.forEach(result => {
        shouldIgnore([result.startIndex, result.endIndex]);
      });
    }

  };
}
//# sourceMappingURL=textlint-filter-rule-allowlist.js.map