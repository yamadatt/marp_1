{"version":3,"sources":["../src/textlint-filter-rule-allowlist.js"],"names":["loadAllowlistConfigFile","baseDirectory","filePath","fs","require","configFilePath","path","resolve","extName","extname","configFile","readFileSync","JSON","parse","test","yaml","load","Error","getAllowWordsFromFiles","files","results","forEach","config","Array","isArray","concat","defaultOptions","allow","allowlistConfigPaths","context","options","Syntax","shouldIgnore","getSource","process","cwd","allowWords","allAllowWords","Document","node","text","matchResults","result","startIndex","endIndex"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,uBAAuB,GAAG,CAACC,aAAD,EAAgBC,QAAhB,KAA6B;AACzD;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,cAAc,GAAGC,cAAKC,OAAL,CAAaN,aAAb,EAA4BC,QAA5B,CAAvB;;AACA,MAAMM,OAAO,GAAGF,cAAKG,OAAL,CAAaJ,cAAb,CAAhB;;AACA,MAAMK,UAAU,GAAGP,EAAE,CAACQ,YAAH,CAAgBN,cAAhB,CAAnB;;AACA,MAAIG,OAAO,IAAI,OAAf,EAAwB;AACpB,WAAOI,IAAI,CAACC,KAAL,CAAWH,UAAX,CAAP;AACH,GAFD,MAEO,IAAI,gBAAgBI,IAAhB,CAAqBN,OAArB,CAAJ,EAAmC;AACtC,WAAOO,gBAAKC,IAAL,CAAUN,UAAV,CAAP;AACH;;AACD,QAAM,IAAIO,KAAJ,kCAAoCf,QAApC,EAAN;AACH,CAZD;;AAcA,IAAMgB,sBAAsB,GAAG,CAACC,KAAD,EAAQlB,aAAR,KAA0B;AACrD,MAAImB,OAAO,GAAG,EAAd;AACAD,EAAAA,KAAK,CAACE,OAAN,CAAenB,QAAD,IAAc;AACxB,QAAMoB,MAAM,GAAGtB,uBAAuB,CAACC,aAAD,EAAgBC,QAAhB,CAAtC;;AACA,QAAIoB,MAAM,IAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAd,EAAqC;AACjCF,MAAAA,OAAO,GAAGA,OAAO,CAACK,MAAR,CAAeH,MAAf,CAAV;AACH,KAFD,MAEO;AACH,YAAM,IAAIL,KAAJ,mDAAqDf,QAArD,EAAN;AACH;AACJ,GAPD;AAQA,SAAOkB,OAAP;AACH,CAXD;;AAaA,IAAMM,cAAc,GAAG;AACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,KAAK,EAAE,EAVY;;AAWnB;AACJ;AACA;AACIC,EAAAA,oBAAoB,EAAE;AAdH,CAAvB;;AAgBe,kBAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AACvC,MAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA;AAAxB,MAAsCJ,OAA5C;AACA,MAAM5B,aAAa,GAAG,wCAAiB4B,OAAjB,KAA6BK,OAAO,CAACC,GAAR,EAAnD;AACA,MAAMC,UAAU,GAAGN,OAAO,CAACH,KAAR,IAAiBD,cAAc,CAACC,KAAnD;AACA,MAAMC,oBAAoB,GAAGE,OAAO,CAACF,oBAAR,GACvBV,sBAAsB,CAACY,OAAO,CAACF,oBAAT,EAA+B3B,aAA/B,CADC,GAEvB,EAFN;AAGA,MAAMoC,aAAa,GAAGD,UAAU,CAACX,MAAX,CAAkBG,oBAAlB,CAAtB;AACA,SAAO;AACH,KAACG,MAAM,CAACO,QAAR,EAAkBC,IAAlB,EAAwB;AACpB,UAAMC,IAAI,GAAGP,SAAS,CAACM,IAAD,CAAtB;AACA,UAAME,YAAY,GAAG,wCAAcD,IAAd,EAAoBH,aAApB,CAArB;AACAI,MAAAA,YAAY,CAACpB,OAAb,CAAsBqB,MAAD,IAAY;AAC7BV,QAAAA,YAAY,CAAC,CAACU,MAAM,CAACC,UAAR,EAAoBD,MAAM,CAACE,QAA3B,CAAD,CAAZ;AACH,OAFD;AAGH;;AAPE,GAAP;AASH","sourcesContent":["import path from \"path\";\nimport yaml from \"js-yaml\";\nimport { getConfigBaseDir } from \"@textlint/get-config-base-dir\";\nimport { matchPatterns } from \"@textlint/regexp-string-matcher\";\n\nconst loadAllowlistConfigFile = (baseDirectory, filePath) => {\n    // It is for suppoting browser bundler.\n    const fs = require(\"fs\");\n    const configFilePath = path.resolve(baseDirectory, filePath);\n    const extName = path.extname(configFilePath);\n    const configFile = fs.readFileSync(configFilePath);\n    if (extName == \".json\") {\n        return JSON.parse(configFile);\n    } else if (/\\.(yml|yaml)$/.test(extName)) {\n        return yaml.load(configFile);\n    }\n    throw new Error(`Unsupported file type: ${filePath}`);\n};\n\nconst getAllowWordsFromFiles = (files, baseDirectory) => {\n    let results = [];\n    files.forEach((filePath) => {\n        const config = loadAllowlistConfigFile(baseDirectory, filePath);\n        if (config && Array.isArray(config)) {\n            results = results.concat(config);\n        } else {\n            throw new Error(`This allow file is not allow word list: ${filePath}`);\n        }\n    });\n    return results;\n};\n\nconst defaultOptions = {\n    /**\n     * allowing list strings or RegExp-like strings\n     *\n     * [\n     *     \"string\",\n     *     \"/\\\\d+/\",\n     *     \"/^===/m\",\n     * ]\n     */\n    allow: [],\n    /**\n     * file path list that includes allow words.\n     */\n    allowlistConfigPaths: []\n};\nexport default function (context, options) {\n    const { Syntax, shouldIgnore, getSource } = context;\n    const baseDirectory = getConfigBaseDir(context) || process.cwd();\n    const allowWords = options.allow || defaultOptions.allow;\n    const allowlistConfigPaths = options.allowlistConfigPaths\n        ? getAllowWordsFromFiles(options.allowlistConfigPaths, baseDirectory)\n        : [];\n    const allAllowWords = allowWords.concat(allowlistConfigPaths);\n    return {\n        [Syntax.Document](node) {\n            const text = getSource(node);\n            const matchResults = matchPatterns(text, allAllowWords);\n            matchResults.forEach((result) => {\n                shouldIgnore([result.startIndex, result.endIndex]);\n            });\n        }\n    };\n}\n"],"file":"textlint-filter-rule-allowlist.js"}